%This file is generated automatically.function [ SystemID,ComponentID,MsgType,Error ] = mavlink_parser( msg )global MAV_AUTOPILOT_GENERIC MAV_AUTOPILOT_PIXHAWK MAV_AUTOPILOT_SLUGS MAV_AUTOPILOT_ARDUPILOTMEGA MAV_AUTOPILOT_OPENPILOT MAV_AUTOPILOT_GENERIC_WAYPOINTS_ONLY MAV_AUTOPILOT_GENERIC_WAYPOINTS_AND_SIMPLE_NAVIGATION_ONLY MAV_AUTOPILOT_GENERIC_MISSION_FULL MAV_AUTOPILOT_INVALID MAV_AUTOPILOT_PPZ MAV_AUTOPILOT_UDB MAV_AUTOPILOT_FP MAV_AUTOPILOT_PX4 MAV_AUTOPILOT_SMACCMPILOT MAV_AUTOPILOT_AUTOQUAD MAV_AUTOPILOT_ARMAZILA MAV_AUTOPILOT_AEROB MAV_TYPE_GENERIC MAV_TYPE_FIXED_WING MAV_TYPE_QUADROTOR MAV_TYPE_COAXIAL MAV_TYPE_HELICOPTER MAV_TYPE_ANTENNA_TRACKER MAV_TYPE_GCS MAV_TYPE_AIRSHIP MAV_TYPE_FREE_BALLOON MAV_TYPE_ROCKET MAV_TYPE_GROUND_ROVER MAV_TYPE_SURFACE_BOAT MAV_TYPE_SUBMARINE MAV_TYPE_HEXAROTOR MAV_TYPE_OCTOROTOR MAV_TYPE_TRICOPTER MAV_TYPE_FLAPPING_WING MAV_TYPE_KITE MAV_MODE_FLAG_SAFETY_ARMED MAV_MODE_FLAG_MANUAL_INPUT_ENABLED MAV_MODE_FLAG_HIL_ENABLED MAV_MODE_FLAG_STABILIZE_ENABLED MAV_MODE_FLAG_GUIDED_ENABLED MAV_MODE_FLAG_AUTO_ENABLED MAV_MODE_FLAG_TEST_ENABLED MAV_MODE_FLAG_CUSTOM_MODE_ENABLED MAV_MODE_FLAG_DECODE_POSITION_SAFETY MAV_MODE_FLAG_DECODE_POSITION_MANUAL MAV_MODE_FLAG_DECODE_POSITION_HIL MAV_MODE_FLAG_DECODE_POSITION_STABILIZE MAV_MODE_FLAG_DECODE_POSITION_GUIDED MAV_MODE_FLAG_DECODE_POSITION_AUTO MAV_MODE_FLAG_DECODE_POSITION_TEST MAV_MODE_FLAG_DECODE_POSITION_CUSTOM_MODE MAV_GOTO_DO_HOLD MAV_GOTO_DO_CONTINUE MAV_GOTO_HOLD_AT_CURRENT_POSITION MAV_GOTO_HOLD_AT_SPECIFIED_POSITION MAV_MODE_PREFLIGHT MAV_MODE_STABILIZE_DISARMED MAV_MODE_STABILIZE_ARMED MAV_MODE_MANUAL_DISARMED MAV_MODE_MANUAL_ARMED MAV_MODE_GUIDED_DISARMED MAV_MODE_GUIDED_ARMED MAV_MODE_AUTO_DISARMED MAV_MODE_AUTO_ARMED MAV_MODE_TEST_DISARMED MAV_MODE_TEST_ARMED MAV_STATE_UNINIT MAV_COMP_ID_ALL MAV_COMP_ID_GPS MAV_COMP_ID_MISSIONPLANNER MAV_COMP_ID_PATHPLANNER MAV_COMP_ID_MAPPER MAV_COMP_ID_CAMERA MAV_COMP_ID_IMU MAV_COMP_ID_IMU_2 MAV_COMP_ID_IMU_3 MAV_COMP_ID_UDP_BRIDGE MAV_COMP_ID_UART_BRIDGE MAV_COMP_ID_SYSTEM_CONTROL MAV_COMP_ID_SERVO1 MAV_COMP_ID_SERVO2 MAV_COMP_ID_SERVO3 MAV_COMP_ID_SERVO4 MAV_COMP_ID_SERVO5 MAV_COMP_ID_SERVO6 MAV_COMP_ID_SERVO7 MAV_COMP_ID_SERVO8 MAV_COMP_ID_SERVO9 MAV_COMP_ID_SERVO10 MAV_COMP_ID_SERVO11 MAV_COMP_ID_SERVO12 MAV_COMP_ID_SERVO13 MAV_COMP_ID_SERVO14 MAV_SYS_STATUS_SENSOR_3D_GYRO MAV_SYS_STATUS_SENSOR_3D_ACCEL MAV_SYS_STATUS_SENSOR_3D_MAG MAV_SYS_STATUS_SENSOR_ABSOLUTE_PRESSURE MAV_SYS_STATUS_SENSOR_DIFFERENTIAL_PRESSURE MAV_SYS_STATUS_SENSOR_GPS MAV_SYS_STATUS_SENSOR_OPTICAL_FLOW MAV_SYS_STATUS_SENSOR_VISION_POSITION MAV_SYS_STATUS_SENSOR_LASER_POSITION MAV_SYS_STATUS_SENSOR_EXTERNAL_GROUND_TRUTH MAV_SYS_STATUS_SENSOR_ANGULAR_RATE_CONTROL MAV_SYS_STATUS_SENSOR_ATTITUDE_STABILIZATION MAV_SYS_STATUS_SENSOR_YAW_POSITION MAV_SYS_STATUS_SENSOR_Z_ALTITUDE_CONTROL MAV_SYS_STATUS_SENSOR_XY_POSITION_CONTROL MAV_SYS_STATUS_SENSOR_MOTOR_OUTPUTS MAV_SYS_STATUS_SENSOR_RC_RECEIVER MAV_FRAME_GLOBAL MAV_FRAME_LOCAL_NED MAV_FRAME_MISSION MAV_FRAME_GLOBAL_RELATIVE_ALT MAV_FRAME_LOCAL_ENU MAV_CMD_NAV_WAYPOINT MAV_CMD_NAV_LOITER_UNLIM MAV_CMD_NAV_LOITER_TURNS MAV_CMD_NAV_LOITER_TIME MAV_CMD_NAV_RETURN_TO_LAUNCH MAV_CMD_NAV_LAND MAV_CMD_NAV_TAKEOFF MAV_CMD_NAV_ROI MAV_CMD_NAV_PATHPLANNING MAV_CMD_NAV_LAST MAV_CMD_CONDITION_DELAY MAV_CMD_CONDITION_CHANGE_ALT MAV_CMD_CONDITION_DISTANCE MAV_CMD_CONDITION_YAW MAV_CMD_CONDITION_LAST MAV_CMD_DO_SET_MODE MAV_CMD_DO_JUMP MAV_CMD_DO_CHANGE_SPEED MAV_CMD_DO_SET_HOME MAV_CMD_DO_SET_PARAMETER MAV_CMD_DO_SET_RELAY MAV_CMD_DO_REPEAT_RELAY MAV_CMD_DO_SET_SERVO MAV_CMD_DO_REPEAT_SERVO MAV_CMD_DO_CONTROL_VIDEO MAV_CMD_DO_SET_ROI MAV_CMD_DO_LAST MAV_CMD_PREFLIGHT_CALIBRATION MAV_CMD_PREFLIGHT_SET_SENSOR_OFFSETS MAV_CMD_PREFLIGHT_STORAGE MAV_CMD_PREFLIGHT_REBOOT_SHUTDOWN MAV_CMD_OVERRIDE_GOTO MAV_CMD_MISSION_START MAV_CMD_COMPONENT_ARM_DISARM MAV_CMD_START_RX_PAIR MAV_DATA_STREAM_ALL MAV_DATA_STREAM_RAW_SENSORS MAV_DATA_STREAM_EXTENDED_STATUS MAV_DATA_STREAM_RC_CHANNELS MAV_DATA_STREAM_RAW_CONTROLLER MAV_DATA_STREAM_POSITION MAV_DATA_STREAM_EXTRA1 MAV_DATA_STREAM_EXTRA2 MAV_DATA_STREAM_EXTRA3 MAV_ROI_NONE MAV_ROI_WPNEXT MAV_ROI_WPINDEX MAV_ROI_LOCATION MAV_ROI_TARGET MAV_PARAM_TYPE_UINT8 MAV_PARAM_TYPE_INT8 MAV_PARAM_TYPE_UINT16 MAV_PARAM_TYPE_INT16 MAV_PARAM_TYPE_UINT32 MAV_PARAM_TYPE_INT32 MAV_PARAM_TYPE_UINT64 MAV_PARAM_TYPE_INT64 MAV_PARAM_TYPE_REAL32 MAV_PARAM_TYPE_REAL64 MAV_RESULT_ACCEPTED MAV_RESULT_TEMPORARILY_REJECTED MAV_RESULT_DENIED MAV_RESULT_UNSUPPORTED MAV_RESULT_FAILED MAV_MISSION_ACCEPTED MAV_MISSION_ERROR MAV_MISSION_UNSUPPORTED_FRAME MAV_MISSION_UNSUPPORTED MAV_MISSION_NO_SPACE MAV_MISSION_INVALID MAV_MISSION_INVALID_PARAM1 MAV_MISSION_INVALID_PARAM2 MAV_MISSION_INVALID_PARAM3 MAV_MISSION_INVALID_PARAM4 MAV_MISSION_INVALID_PARAM5_X MAV_MISSION_INVALID_PARAM6_Y MAV_MISSION_INVALID_PARAM7 MAV_MISSION_INVALID_SEQUENCE MAV_MISSION_DENIED MAV_SEVERITY_EMERGENCY MAV_SEVERITY_ALERT MAV_SEVERITY_CRITICAL MAV_SEVERITY_ERROR MAV_SEVERITY_WARNING MAV_SEVERITY_NOTICE MAV_SEVERITY_INFO MAV_SEVERITY_DEBUG HEARTBEAT_ID HEARTBEAT SYS_STATUS_ID SYS_STATUS SYSTEM_TIME_ID SYSTEM_TIME PING_ID PING CHANGE_OPERATOR_CONTROL_ID CHANGE_OPERATOR_CONTROL CHANGE_OPERATOR_CONTROL_ACK_ID CHANGE_OPERATOR_CONTROL_ACK AUTH_KEY_ID AUTH_KEY SET_MODE_ID SET_MODE PARAM_REQUEST_READ_ID PARAM_REQUEST_READ PARAM_REQUEST_LIST_ID PARAM_REQUEST_LIST PARAM_VALUE_ID PARAM_VALUE PARAM_SET_ID PARAM_SET GPS_RAW_INT_ID GPS_RAW_INT GPS_STATUS_ID GPS_STATUS SCALED_IMU_ID SCALED_IMU RAW_IMU_ID RAW_IMU RAW_PRESSURE_ID RAW_PRESSURE SCALED_PRESSURE_ID SCALED_PRESSURE ATTITUDE_ID ATTITUDE ATTITUDE_QUATERNION_ID ATTITUDE_QUATERNION LOCAL_POSITION_NED_ID LOCAL_POSITION_NED GLOBAL_POSITION_INT_ID GLOBAL_POSITION_INT RC_CHANNELS_SCALED_ID RC_CHANNELS_SCALED RC_CHANNELS_RAW_ID RC_CHANNELS_RAW SERVO_OUTPUT_RAW_ID SERVO_OUTPUT_RAW MISSION_REQUEST_PARTIAL_LIST_ID MISSION_REQUEST_PARTIAL_LIST MISSION_WRITE_PARTIAL_LIST_ID MISSION_WRITE_PARTIAL_LIST MISSION_ITEM_ID MISSION_ITEM MISSION_REQUEST_ID MISSION_REQUEST MISSION_SET_CURRENT_ID MISSION_SET_CURRENT MISSION_CURRENT_ID MISSION_CURRENT MISSION_REQUEST_LIST_ID MISSION_REQUEST_LIST MISSION_COUNT_ID MISSION_COUNT MISSION_CLEAR_ALL_ID MISSION_CLEAR_ALL MISSION_ITEM_REACHED_ID MISSION_ITEM_REACHED MISSION_ACK_ID MISSION_ACK SET_GPS_GLOBAL_ORIGIN_ID SET_GPS_GLOBAL_ORIGIN GPS_GLOBAL_ORIGIN_ID GPS_GLOBAL_ORIGIN SET_LOCAL_POSITION_SETPOINT_ID SET_LOCAL_POSITION_SETPOINT LOCAL_POSITION_SETPOINT_ID LOCAL_POSITION_SETPOINT GLOBAL_POSITION_SETPOINT_INT_ID GLOBAL_POSITION_SETPOINT_INT SET_GLOBAL_POSITION_SETPOINT_INT_ID SET_GLOBAL_POSITION_SETPOINT_INT SAFETY_SET_ALLOWED_AREA_ID SAFETY_SET_ALLOWED_AREA SAFETY_ALLOWED_AREA_ID SAFETY_ALLOWED_AREA SET_ROLL_PITCH_YAW_THRUST_ID SET_ROLL_PITCH_YAW_THRUST SET_ROLL_PITCH_YAW_SPEED_THRUST_ID SET_ROLL_PITCH_YAW_SPEED_THRUST ROLL_PITCH_YAW_THRUST_SETPOINT_ID ROLL_PITCH_YAW_THRUST_SETPOINT ROLL_PITCH_YAW_SPEED_THRUST_SETPOINT_ID ROLL_PITCH_YAW_SPEED_THRUST_SETPOINT SET_QUAD_MOTORS_SETPOINT_ID SET_QUAD_MOTORS_SETPOINT SET_QUAD_SWARM_ROLL_PITCH_YAW_THRUST_ID SET_QUAD_SWARM_ROLL_PITCH_YAW_THRUST NAV_CONTROLLER_OUTPUT_ID NAV_CONTROLLER_OUTPUT SET_QUAD_SWARM_LED_ROLL_PITCH_YAW_THRUST_ID SET_QUAD_SWARM_LED_ROLL_PITCH_YAW_THRUST STATE_CORRECTION_ID STATE_CORRECTION REQUEST_DATA_STREAM_ID REQUEST_DATA_STREAM DATA_STREAM_ID DATA_STREAM MANUAL_CONTROL_ID MANUAL_CONTROL RC_CHANNELS_OVERRIDE_ID RC_CHANNELS_OVERRIDE VFR_HUD_ID VFR_HUD COMMAND_LONG_ID COMMAND_LONG COMMAND_ACK_ID COMMAND_ACK ROLL_PITCH_YAW_RATES_THRUST_SETPOINT_ID ROLL_PITCH_YAW_RATES_THRUST_SETPOINT MANUAL_SETPOINT_ID MANUAL_SETPOINT LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET_ID LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET HIL_STATE_ID HIL_STATE HIL_CONTROLS_ID HIL_CONTROLS HIL_RC_INPUTS_RAW_ID HIL_RC_INPUTS_RAW OPTICAL_FLOW_ID OPTICAL_FLOW GLOBAL_VISION_POSITION_ESTIMATE_ID GLOBAL_VISION_POSITION_ESTIMATE VISION_POSITION_ESTIMATE_ID VISION_POSITION_ESTIMATE VISION_SPEED_ESTIMATE_ID VISION_SPEED_ESTIMATE VICON_POSITION_ESTIMATE_ID VICON_POSITION_ESTIMATE HIGHRES_IMU_ID HIGHRES_IMU OMNIDIRECTIONAL_FLOW_ID OMNIDIRECTIONAL_FLOW HIL_SENSOR_ID HIL_SENSOR SIM_STATE_ID SIM_STATE RADIO_STATUS_ID RADIO_STATUS FILE_TRANSFER_START_ID FILE_TRANSFER_START FILE_TRANSFER_DIR_LIST_ID FILE_TRANSFER_DIR_LIST FILE_TRANSFER_RES_ID FILE_TRANSFER_RES HIL_GPS_ID HIL_GPS HIL_OPTICAL_FLOW_ID HIL_OPTICAL_FLOW HIL_STATE_QUATERNION_ID HIL_STATE_QUATERNION BATTERY_STATUS_ID BATTERY_STATUS SETPOINT_8DOF_ID SETPOINT_8DOF SETPOINT_6DOF_ID SETPOINT_6DOF MEMORY_VECT_ID MEMORY_VECT DEBUG_VECT_ID DEBUG_VECT NAMED_VALUE_FLOAT_ID NAMED_VALUE_FLOAT NAMED_VALUE_INT_ID NAMED_VALUE_INT STATUSTEXT_ID STATUSTEXT DEBUG_ID DEBUG;Error = false;PayloadLength = msg(2);Sequence = msg(3);SystemID = msg(4);ComponentID = msg(5);MsgType = msg(6);switch msg(6)case HEARTBEAT_IDHEARTBEAT{length(HEARTBEAT)+1}.type = typecast(uint8(msg(7:7)),'uint8');HEARTBEAT{length(HEARTBEAT)}.autopilot = typecast(uint8(msg(8:8)),'uint8');HEARTBEAT{length(HEARTBEAT)}.base_mode = typecast(uint8(msg(9:9)),'uint8');HEARTBEAT{length(HEARTBEAT)}.custom_mode = typecast(uint8(msg(10:13)),'uint32');HEARTBEAT{length(HEARTBEAT)}.system_status = typecast(uint8(msg(14:14)),'uint8');HEARTBEAT{length(HEARTBEAT)}.mavlink_version = typecast(uint8(msg(15:15)),'');case SYS_STATUS_IDSYS_STATUS{length(SYS_STATUS)+1}.onboard_control_sensors_present = typecast(uint8(msg(7:10)),'uint32');SYS_STATUS{length(SYS_STATUS)}.onboard_control_sensors_enabled = typecast(uint8(msg(11:14)),'uint32');SYS_STATUS{length(SYS_STATUS)}.onboard_control_sensors_health = typecast(uint8(msg(15:18)),'uint32');SYS_STATUS{length(SYS_STATUS)}.load = typecast(uint8(msg(19:20)),'uint16');SYS_STATUS{length(SYS_STATUS)}.voltage_battery = typecast(uint8(msg(21:22)),'uint16');SYS_STATUS{length(SYS_STATUS)}.current_battery = typecast(uint8(msg(23:24)),'int16');SYS_STATUS{length(SYS_STATUS)}.battery_remaining = typecast(uint8(msg(25:25)),'int8');SYS_STATUS{length(SYS_STATUS)}.drop_rate_comm = typecast(uint8(msg(26:27)),'uint16');SYS_STATUS{length(SYS_STATUS)}.errors_comm = typecast(uint8(msg(28:29)),'uint16');SYS_STATUS{length(SYS_STATUS)}.errors_count1 = typecast(uint8(msg(30:31)),'uint16');SYS_STATUS{length(SYS_STATUS)}.errors_count2 = typecast(uint8(msg(32:33)),'uint16');SYS_STATUS{length(SYS_STATUS)}.errors_count3 = typecast(uint8(msg(34:35)),'uint16');SYS_STATUS{length(SYS_STATUS)}.errors_count4 = typecast(uint8(msg(36:37)),'uint16');case SYSTEM_TIME_IDSYSTEM_TIME{length(SYSTEM_TIME)+1}.time_unix_usec = typecast(uint8(msg(7:14)),'uint64');SYSTEM_TIME{length(SYSTEM_TIME)}.time_boot_ms = typecast(uint8(msg(15:18)),'uint32');case PING_IDPING{length(PING)+1}.time_usec = typecast(uint8(msg(7:14)),'uint64');PING{length(PING)}.seq = typecast(uint8(msg(15:18)),'uint32');PING{length(PING)}.target_system = typecast(uint8(msg(19:19)),'uint8');PING{length(PING)}.target_component = typecast(uint8(msg(20:20)),'uint8');case CHANGE_OPERATOR_CONTROL_IDCHANGE_OPERATOR_CONTROL{length(CHANGE_OPERATOR_CONTROL)+1}.target_system = typecast(uint8(msg(7:7)),'uint8');CHANGE_OPERATOR_CONTROL{length(CHANGE_OPERATOR_CONTROL)}.control_request = typecast(uint8(msg(8:8)),'uint8');CHANGE_OPERATOR_CONTROL{length(CHANGE_OPERATOR_CONTROL)}.version = typecast(uint8(msg(9:9)),'uint8');CHANGE_OPERATOR_CONTROL{length(CHANGE_OPERATOR_CONTROL)}.passkey = typecast(uint8(msg(9:9)),'');case CHANGE_OPERATOR_CONTROL_ACK_IDCHANGE_OPERATOR_CONTROL_ACK{length(CHANGE_OPERATOR_CONTROL_ACK)+1}.gcs_system_id = typecast(uint8(msg(7:7)),'uint8');CHANGE_OPERATOR_CONTROL_ACK{length(CHANGE_OPERATOR_CONTROL_ACK)}.control_request = typecast(uint8(msg(8:8)),'uint8');CHANGE_OPERATOR_CONTROL_ACK{length(CHANGE_OPERATOR_CONTROL_ACK)}.ack = typecast(uint8(msg(9:9)),'uint8');case AUTH_KEY_IDAUTH_KEY{length(AUTH_KEY)+1}.key = typecast(uint8(msg(0:0)),'');case SET_MODE_IDSET_MODE{length(SET_MODE)+1}.target_system = typecast(uint8(msg(7:7)),'uint8');SET_MODE{length(SET_MODE)}.base_mode = typecast(uint8(msg(8:8)),'uint8');SET_MODE{length(SET_MODE)}.custom_mode = typecast(uint8(msg(9:12)),'uint32');case PARAM_REQUEST_READ_IDPARAM_REQUEST_READ{length(PARAM_REQUEST_READ)+1}.target_system = typecast(uint8(msg(7:7)),'uint8');PARAM_REQUEST_READ{length(PARAM_REQUEST_READ)}.target_component = typecast(uint8(msg(8:8)),'uint8');PARAM_REQUEST_READ{length(PARAM_REQUEST_READ)}.param_id = typecast(uint8(msg(8:8)),'');PARAM_REQUEST_READ{length(PARAM_REQUEST_READ)}.param_index = typecast(uint8(msg(9:10)),'int16');case PARAM_REQUEST_LIST_IDPARAM_REQUEST_LIST{length(PARAM_REQUEST_LIST)+1}.target_system = typecast(uint8(msg(7:7)),'uint8');PARAM_REQUEST_LIST{length(PARAM_REQUEST_LIST)}.target_component = typecast(uint8(msg(8:8)),'uint8');case PARAM_VALUE_IDPARAM_VALUE{length(PARAM_VALUE)+1}.param_id = typecast(uint8(msg(0:0)),'');PARAM_VALUE{length(PARAM_VALUE)}.param_value = typecast(uint8(msg(1:4)),'float');PARAM_VALUE{length(PARAM_VALUE)}.param_type = typecast(uint8(msg(5:5)),'uint8');PARAM_VALUE{length(PARAM_VALUE)}.param_count = typecast(uint8(msg(6:7)),'uint16');PARAM_VALUE{length(PARAM_VALUE)}.param_index = typecast(uint8(msg(8:9)),'uint16');case PARAM_SET_IDPARAM_SET{length(PARAM_SET)+1}.target_system = typecast(uint8(msg(7:7)),'uint8');PARAM_SET{length(PARAM_SET)}.target_component = typecast(uint8(msg(8:8)),'uint8');PARAM_SET{length(PARAM_SET)}.param_id = typecast(uint8(msg(8:8)),'');PARAM_SET{length(PARAM_SET)}.param_value = typecast(uint8(msg(9:12)),'float');PARAM_SET{length(PARAM_SET)}.param_type = typecast(uint8(msg(13:13)),'uint8');case GPS_RAW_INT_IDGPS_RAW_INT{length(GPS_RAW_INT)+1}.time_usec = typecast(uint8(msg(7:14)),'uint64');GPS_RAW_INT{length(GPS_RAW_INT)}.fix_type = typecast(uint8(msg(15:15)),'uint8');GPS_RAW_INT{length(GPS_RAW_INT)}.lat = typecast(uint8(msg(16:19)),'int32');GPS_RAW_INT{length(GPS_RAW_INT)}.lon = typecast(uint8(msg(20:23)),'int32');GPS_RAW_INT{length(GPS_RAW_INT)}.alt = typecast(uint8(msg(24:27)),'int32');GPS_RAW_INT{length(GPS_RAW_INT)}.eph = typecast(uint8(msg(28:29)),'uint16');GPS_RAW_INT{length(GPS_RAW_INT)}.epv = typecast(uint8(msg(30:31)),'uint16');GPS_RAW_INT{length(GPS_RAW_INT)}.vel = typecast(uint8(msg(32:33)),'uint16');GPS_RAW_INT{length(GPS_RAW_INT)}.cog = typecast(uint8(msg(34:35)),'uint16');GPS_RAW_INT{length(GPS_RAW_INT)}.satellites_visible = typecast(uint8(msg(36:36)),'uint8');case GPS_STATUS_IDGPS_STATUS{length(GPS_STATUS)+1}.satellites_visible = typecast(uint8(msg(7:7)),'uint8');GPS_STATUS{length(GPS_STATUS)}.satellite_prn = typecast(uint8(msg(7:7)),'');GPS_STATUS{length(GPS_STATUS)}.satellite_used = typecast(uint8(msg(7:7)),'');GPS_STATUS{length(GPS_STATUS)}.satellite_elevation = typecast(uint8(msg(7:7)),'');GPS_STATUS{length(GPS_STATUS)}.satellite_azimuth = typecast(uint8(msg(7:7)),'');GPS_STATUS{length(GPS_STATUS)}.satellite_snr = typecast(uint8(msg(7:7)),'');case SCALED_IMU_IDSCALED_IMU{length(SCALED_IMU)+1}.time_boot_ms = typecast(uint8(msg(7:10)),'uint32');SCALED_IMU{length(SCALED_IMU)}.xacc = typecast(uint8(msg(11:12)),'int16');SCALED_IMU{length(SCALED_IMU)}.yacc = typecast(uint8(msg(13:14)),'int16');SCALED_IMU{length(SCALED_IMU)}.zacc = typecast(uint8(msg(15:16)),'int16');SCALED_IMU{length(SCALED_IMU)}.xgyro = typecast(uint8(msg(17:18)),'int16');SCALED_IMU{length(SCALED_IMU)}.ygyro = typecast(uint8(msg(19:20)),'int16');SCALED_IMU{length(SCALED_IMU)}.zgyro = typecast(uint8(msg(21:22)),'int16');SCALED_IMU{length(SCALED_IMU)}.xmag = typecast(uint8(msg(23:24)),'int16');SCALED_IMU{length(SCALED_IMU)}.ymag = typecast(uint8(msg(25:26)),'int16');SCALED_IMU{length(SCALED_IMU)}.zmag = typecast(uint8(msg(27:28)),'int16');case RAW_IMU_IDRAW_IMU{length(RAW_IMU)+1}.time_usec = typecast(uint8(msg(7:14)),'uint64');RAW_IMU{length(RAW_IMU)}.xacc = typecast(uint8(msg(15:16)),'int16');RAW_IMU{length(RAW_IMU)}.yacc = typecast(uint8(msg(17:18)),'int16');RAW_IMU{length(RAW_IMU)}.zacc = typecast(uint8(msg(19:20)),'int16');RAW_IMU{length(RAW_IMU)}.xgyro = typecast(uint8(msg(21:22)),'int16');RAW_IMU{length(RAW_IMU)}.ygyro = typecast(uint8(msg(23:24)),'int16');RAW_IMU{length(RAW_IMU)}.zgyro = typecast(uint8(msg(25:26)),'int16');RAW_IMU{length(RAW_IMU)}.xmag = typecast(uint8(msg(27:28)),'int16');RAW_IMU{length(RAW_IMU)}.ymag = typecast(uint8(msg(29:30)),'int16');RAW_IMU{length(RAW_IMU)}.zmag = typecast(uint8(msg(31:32)),'int16');case RAW_PRESSURE_IDRAW_PRESSURE{length(RAW_PRESSURE)+1}.time_usec = typecast(uint8(msg(7:14)),'uint64');RAW_PRESSURE{length(RAW_PRESSURE)}.press_abs = typecast(uint8(msg(15:16)),'int16');RAW_PRESSURE{length(RAW_PRESSURE)}.press_diff1 = typecast(uint8(msg(17:18)),'int16');RAW_PRESSURE{length(RAW_PRESSURE)}.press_diff2 = typecast(uint8(msg(19:20)),'int16');RAW_PRESSURE{length(RAW_PRESSURE)}.temperature = typecast(uint8(msg(21:22)),'int16');case SCALED_PRESSURE_IDSCALED_PRESSURE{length(SCALED_PRESSURE)+1}.time_boot_ms = typecast(uint8(msg(7:10)),'uint32');SCALED_PRESSURE{length(SCALED_PRESSURE)}.press_abs = typecast(uint8(msg(11:14)),'float');SCALED_PRESSURE{length(SCALED_PRESSURE)}.press_diff = typecast(uint8(msg(15:18)),'float');SCALED_PRESSURE{length(SCALED_PRESSURE)}.temperature = typecast(uint8(msg(19:20)),'int16');case ATTITUDE_IDATTITUDE{length(ATTITUDE)+1}.time_boot_ms = typecast(uint8(msg(7:10)),'uint32');ATTITUDE{length(ATTITUDE)}.roll = typecast(uint8(msg(11:14)),'float');ATTITUDE{length(ATTITUDE)}.pitch = typecast(uint8(msg(15:18)),'float');ATTITUDE{length(ATTITUDE)}.yaw = typecast(uint8(msg(19:22)),'float');ATTITUDE{length(ATTITUDE)}.rollspeed = typecast(uint8(msg(23:26)),'float');ATTITUDE{length(ATTITUDE)}.pitchspeed = typecast(uint8(msg(27:30)),'float');ATTITUDE{length(ATTITUDE)}.yawspeed = typecast(uint8(msg(31:34)),'float');case ATTITUDE_QUATERNION_IDATTITUDE_QUATERNION{length(ATTITUDE_QUATERNION)+1}.time_boot_ms = typecast(uint8(msg(7:10)),'uint32');ATTITUDE_QUATERNION{length(ATTITUDE_QUATERNION)}.q1 = typecast(uint8(msg(11:14)),'float');ATTITUDE_QUATERNION{length(ATTITUDE_QUATERNION)}.q2 = typecast(uint8(msg(15:18)),'float');ATTITUDE_QUATERNION{length(ATTITUDE_QUATERNION)}.q3 = typecast(uint8(msg(19:22)),'float');ATTITUDE_QUATERNION{length(ATTITUDE_QUATERNION)}.q4 = typecast(uint8(msg(23:26)),'float');ATTITUDE_QUATERNION{length(ATTITUDE_QUATERNION)}.rollspeed = typecast(uint8(msg(27:30)),'float');ATTITUDE_QUATERNION{length(ATTITUDE_QUATERNION)}.pitchspeed = typecast(uint8(msg(31:34)),'float');ATTITUDE_QUATERNION{length(ATTITUDE_QUATERNION)}.yawspeed = typecast(uint8(msg(35:38)),'float');case LOCAL_POSITION_NED_IDLOCAL_POSITION_NED{length(LOCAL_POSITION_NED)+1}.time_boot_ms = typecast(uint8(msg(7:10)),'uint32');LOCAL_POSITION_NED{length(LOCAL_POSITION_NED)}.x = typecast(uint8(msg(11:14)),'float');LOCAL_POSITION_NED{length(LOCAL_POSITION_NED)}.y = typecast(uint8(msg(15:18)),'float');LOCAL_POSITION_NED{length(LOCAL_POSITION_NED)}.z = typecast(uint8(msg(19:22)),'float');LOCAL_POSITION_NED{length(LOCAL_POSITION_NED)}.vx = typecast(uint8(msg(23:26)),'float');LOCAL_POSITION_NED{length(LOCAL_POSITION_NED)}.vy = typecast(uint8(msg(27:30)),'float');LOCAL_POSITION_NED{length(LOCAL_POSITION_NED)}.vz = typecast(uint8(msg(31:34)),'float');case GLOBAL_POSITION_INT_IDGLOBAL_POSITION_INT{length(GLOBAL_POSITION_INT)+1}.time_boot_ms = typecast(uint8(msg(7:10)),'uint32');GLOBAL_POSITION_INT{length(GLOBAL_POSITION_INT)}.lat = typecast(uint8(msg(11:14)),'int32');GLOBAL_POSITION_INT{length(GLOBAL_POSITION_INT)}.lon = typecast(uint8(msg(15:18)),'int32');GLOBAL_POSITION_INT{length(GLOBAL_POSITION_INT)}.alt = typecast(uint8(msg(19:22)),'int32');GLOBAL_POSITION_INT{length(GLOBAL_POSITION_INT)}.relative_alt = typecast(uint8(msg(23:26)),'int32');GLOBAL_POSITION_INT{length(GLOBAL_POSITION_INT)}.vx = typecast(uint8(msg(27:28)),'int16');GLOBAL_POSITION_INT{length(GLOBAL_POSITION_INT)}.vy = typecast(uint8(msg(29:30)),'int16');GLOBAL_POSITION_INT{length(GLOBAL_POSITION_INT)}.vz = typecast(uint8(msg(31:32)),'int16');GLOBAL_POSITION_INT{length(GLOBAL_POSITION_INT)}.hdg = typecast(uint8(msg(33:34)),'uint16');case RC_CHANNELS_SCALED_IDRC_CHANNELS_SCALED{length(RC_CHANNELS_SCALED)+1}.time_boot_ms = typecast(uint8(msg(7:10)),'uint32');RC_CHANNELS_SCALED{length(RC_CHANNELS_SCALED)}.port = typecast(uint8(msg(11:11)),'uint8');RC_CHANNELS_SCALED{length(RC_CHANNELS_SCALED)}.chan1_scaled = typecast(uint8(msg(12:13)),'int16');RC_CHANNELS_SCALED{length(RC_CHANNELS_SCALED)}.chan2_scaled = typecast(uint8(msg(14:15)),'int16');RC_CHANNELS_SCALED{length(RC_CHANNELS_SCALED)}.chan3_scaled = typecast(uint8(msg(16:17)),'int16');RC_CHANNELS_SCALED{length(RC_CHANNELS_SCALED)}.chan4_scaled = typecast(uint8(msg(18:19)),'int16');RC_CHANNELS_SCALED{length(RC_CHANNELS_SCALED)}.chan5_scaled = typecast(uint8(msg(20:21)),'int16');RC_CHANNELS_SCALED{length(RC_CHANNELS_SCALED)}.chan6_scaled = typecast(uint8(msg(22:23)),'int16');RC_CHANNELS_SCALED{length(RC_CHANNELS_SCALED)}.chan7_scaled = typecast(uint8(msg(24:25)),'int16');RC_CHANNELS_SCALED{length(RC_CHANNELS_SCALED)}.chan8_scaled = typecast(uint8(msg(26:27)),'int16');RC_CHANNELS_SCALED{length(RC_CHANNELS_SCALED)}.rssi = typecast(uint8(msg(28:28)),'uint8');case RC_CHANNELS_RAW_IDRC_CHANNELS_RAW{length(RC_CHANNELS_RAW)+1}.time_boot_ms = typecast(uint8(msg(7:10)),'uint32');RC_CHANNELS_RAW{length(RC_CHANNELS_RAW)}.port = typecast(uint8(msg(11:11)),'uint8');RC_CHANNELS_RAW{length(RC_CHANNELS_RAW)}.chan1_raw = typecast(uint8(msg(12:13)),'uint16');RC_CHANNELS_RAW{length(RC_CHANNELS_RAW)}.chan2_raw = typecast(uint8(msg(14:15)),'uint16');RC_CHANNELS_RAW{length(RC_CHANNELS_RAW)}.chan3_raw = typecast(uint8(msg(16:17)),'uint16');RC_CHANNELS_RAW{length(RC_CHANNELS_RAW)}.chan4_raw = typecast(uint8(msg(18:19)),'uint16');RC_CHANNELS_RAW{length(RC_CHANNELS_RAW)}.chan5_raw = typecast(uint8(msg(20:21)),'uint16');RC_CHANNELS_RAW{length(RC_CHANNELS_RAW)}.chan6_raw = typecast(uint8(msg(22:23)),'uint16');RC_CHANNELS_RAW{length(RC_CHANNELS_RAW)}.chan7_raw = typecast(uint8(msg(24:25)),'uint16');RC_CHANNELS_RAW{length(RC_CHANNELS_RAW)}.chan8_raw = typecast(uint8(msg(26:27)),'uint16');RC_CHANNELS_RAW{length(RC_CHANNELS_RAW)}.rssi = typecast(uint8(msg(28:28)),'uint8');case SERVO_OUTPUT_RAW_IDSERVO_OUTPUT_RAW{length(SERVO_OUTPUT_RAW)+1}.time_usec = typecast(uint8(msg(7:10)),'uint32');SERVO_OUTPUT_RAW{length(SERVO_OUTPUT_RAW)}.port = typecast(uint8(msg(11:11)),'uint8');SERVO_OUTPUT_RAW{length(SERVO_OUTPUT_RAW)}.servo1_raw = typecast(uint8(msg(12:13)),'uint16');SERVO_OUTPUT_RAW{length(SERVO_OUTPUT_RAW)}.servo2_raw = typecast(uint8(msg(14:15)),'uint16');SERVO_OUTPUT_RAW{length(SERVO_OUTPUT_RAW)}.servo3_raw = typecast(uint8(msg(16:17)),'uint16');SERVO_OUTPUT_RAW{length(SERVO_OUTPUT_RAW)}.servo4_raw = typecast(uint8(msg(18:19)),'uint16');SERVO_OUTPUT_RAW{length(SERVO_OUTPUT_RAW)}.servo5_raw = typecast(uint8(msg(20:21)),'uint16');SERVO_OUTPUT_RAW{length(SERVO_OUTPUT_RAW)}.servo6_raw = typecast(uint8(msg(22:23)),'uint16');SERVO_OUTPUT_RAW{length(SERVO_OUTPUT_RAW)}.servo7_raw = typecast(uint8(msg(24:25)),'uint16');SERVO_OUTPUT_RAW{length(SERVO_OUTPUT_RAW)}.servo8_raw = typecast(uint8(msg(26:27)),'uint16');case MISSION_REQUEST_PARTIAL_LIST_IDMISSION_REQUEST_PARTIAL_LIST{length(MISSION_REQUEST_PARTIAL_LIST)+1}.target_system = typecast(uint8(msg(7:7)),'uint8');MISSION_REQUEST_PARTIAL_LIST{length(MISSION_REQUEST_PARTIAL_LIST)}.target_component = typecast(uint8(msg(8:8)),'uint8');MISSION_REQUEST_PARTIAL_LIST{length(MISSION_REQUEST_PARTIAL_LIST)}.start_index = typecast(uint8(msg(9:10)),'int16');MISSION_REQUEST_PARTIAL_LIST{length(MISSION_REQUEST_PARTIAL_LIST)}.end_index = typecast(uint8(msg(11:12)),'int16');case MISSION_WRITE_PARTIAL_LIST_IDMISSION_WRITE_PARTIAL_LIST{length(MISSION_WRITE_PARTIAL_LIST)+1}.target_system = typecast(uint8(msg(7:7)),'uint8');MISSION_WRITE_PARTIAL_LIST{length(MISSION_WRITE_PARTIAL_LIST)}.target_component = typecast(uint8(msg(8:8)),'uint8');MISSION_WRITE_PARTIAL_LIST{length(MISSION_WRITE_PARTIAL_LIST)}.start_index = typecast(uint8(msg(9:10)),'int16');MISSION_WRITE_PARTIAL_LIST{length(MISSION_WRITE_PARTIAL_LIST)}.end_index = typecast(uint8(msg(11:12)),'int16');case MISSION_ITEM_IDMISSION_ITEM{length(MISSION_ITEM)+1}.target_system = typecast(uint8(msg(7:7)),'uint8');MISSION_ITEM{length(MISSION_ITEM)}.target_component = typecast(uint8(msg(8:8)),'uint8');MISSION_ITEM{length(MISSION_ITEM)}.seq = typecast(uint8(msg(9:10)),'uint16');MISSION_ITEM{length(MISSION_ITEM)}.frame = typecast(uint8(msg(11:11)),'uint8');MISSION_ITEM{length(MISSION_ITEM)}.command = typecast(uint8(msg(12:13)),'uint16');MISSION_ITEM{length(MISSION_ITEM)}.current = typecast(uint8(msg(14:14)),'uint8');MISSION_ITEM{length(MISSION_ITEM)}.autocontinue = typecast(uint8(msg(15:15)),'uint8');MISSION_ITEM{length(MISSION_ITEM)}.param1 = typecast(uint8(msg(16:19)),'float');MISSION_ITEM{length(MISSION_ITEM)}.param2 = typecast(uint8(msg(20:23)),'float');MISSION_ITEM{length(MISSION_ITEM)}.param3 = typecast(uint8(msg(24:27)),'float');MISSION_ITEM{length(MISSION_ITEM)}.param4 = typecast(uint8(msg(28:31)),'float');MISSION_ITEM{length(MISSION_ITEM)}.x = typecast(uint8(msg(32:35)),'float');MISSION_ITEM{length(MISSION_ITEM)}.y = typecast(uint8(msg(36:39)),'float');MISSION_ITEM{length(MISSION_ITEM)}.z = typecast(uint8(msg(40:43)),'float');case MISSION_REQUEST_IDMISSION_REQUEST{length(MISSION_REQUEST)+1}.target_system = typecast(uint8(msg(7:7)),'uint8');MISSION_REQUEST{length(MISSION_REQUEST)}.target_component = typecast(uint8(msg(8:8)),'uint8');MISSION_REQUEST{length(MISSION_REQUEST)}.seq = typecast(uint8(msg(9:10)),'uint16');case MISSION_SET_CURRENT_IDMISSION_SET_CURRENT{length(MISSION_SET_CURRENT)+1}.target_system = typecast(uint8(msg(7:7)),'uint8');MISSION_SET_CURRENT{length(MISSION_SET_CURRENT)}.target_component = typecast(uint8(msg(8:8)),'uint8');MISSION_SET_CURRENT{length(MISSION_SET_CURRENT)}.seq = typecast(uint8(msg(9:10)),'uint16');case MISSION_CURRENT_IDMISSION_CURRENT{length(MISSION_CURRENT)+1}.seq = typecast(uint8(msg(7:8)),'uint16');case MISSION_REQUEST_LIST_IDMISSION_REQUEST_LIST{length(MISSION_REQUEST_LIST)+1}.target_system = typecast(uint8(msg(7:7)),'uint8');MISSION_REQUEST_LIST{length(MISSION_REQUEST_LIST)}.target_component = typecast(uint8(msg(8:8)),'uint8');case MISSION_COUNT_IDMISSION_COUNT{length(MISSION_COUNT)+1}.target_system = typecast(uint8(msg(7:7)),'uint8');MISSION_COUNT{length(MISSION_COUNT)}.target_component = typecast(uint8(msg(8:8)),'uint8');MISSION_COUNT{length(MISSION_COUNT)}.count = typecast(uint8(msg(9:10)),'uint16');case MISSION_CLEAR_ALL_IDMISSION_CLEAR_ALL{length(MISSION_CLEAR_ALL)+1}.target_system = typecast(uint8(msg(7:7)),'uint8');MISSION_CLEAR_ALL{length(MISSION_CLEAR_ALL)}.target_component = typecast(uint8(msg(8:8)),'uint8');case MISSION_ITEM_REACHED_IDMISSION_ITEM_REACHED{length(MISSION_ITEM_REACHED)+1}.seq = typecast(uint8(msg(7:8)),'uint16');case MISSION_ACK_IDMISSION_ACK{length(MISSION_ACK)+1}.target_system = typecast(uint8(msg(7:7)),'uint8');MISSION_ACK{length(MISSION_ACK)}.target_component = typecast(uint8(msg(8:8)),'uint8');MISSION_ACK{length(MISSION_ACK)}.type = typecast(uint8(msg(9:9)),'uint8');case SET_GPS_GLOBAL_ORIGIN_IDSET_GPS_GLOBAL_ORIGIN{length(SET_GPS_GLOBAL_ORIGIN)+1}.target_system = typecast(uint8(msg(7:7)),'uint8');SET_GPS_GLOBAL_ORIGIN{length(SET_GPS_GLOBAL_ORIGIN)}.latitude = typecast(uint8(msg(8:11)),'int32');SET_GPS_GLOBAL_ORIGIN{length(SET_GPS_GLOBAL_ORIGIN)}.longitude = typecast(uint8(msg(12:15)),'int32');SET_GPS_GLOBAL_ORIGIN{length(SET_GPS_GLOBAL_ORIGIN)}.altitude = typecast(uint8(msg(16:19)),'int32');case GPS_GLOBAL_ORIGIN_IDGPS_GLOBAL_ORIGIN{length(GPS_GLOBAL_ORIGIN)+1}.latitude = typecast(uint8(msg(7:10)),'int32');GPS_GLOBAL_ORIGIN{length(GPS_GLOBAL_ORIGIN)}.longitude = typecast(uint8(msg(11:14)),'int32');GPS_GLOBAL_ORIGIN{length(GPS_GLOBAL_ORIGIN)}.altitude = typecast(uint8(msg(15:18)),'int32');case SET_LOCAL_POSITION_SETPOINT_IDSET_LOCAL_POSITION_SETPOINT{length(SET_LOCAL_POSITION_SETPOINT)+1}.target_system = typecast(uint8(msg(7:7)),'uint8');SET_LOCAL_POSITION_SETPOINT{length(SET_LOCAL_POSITION_SETPOINT)}.target_component = typecast(uint8(msg(8:8)),'uint8');SET_LOCAL_POSITION_SETPOINT{length(SET_LOCAL_POSITION_SETPOINT)}.coordinate_frame = typecast(uint8(msg(9:9)),'uint8');SET_LOCAL_POSITION_SETPOINT{length(SET_LOCAL_POSITION_SETPOINT)}.x = typecast(uint8(msg(10:13)),'float');SET_LOCAL_POSITION_SETPOINT{length(SET_LOCAL_POSITION_SETPOINT)}.y = typecast(uint8(msg(14:17)),'float');SET_LOCAL_POSITION_SETPOINT{length(SET_LOCAL_POSITION_SETPOINT)}.z = typecast(uint8(msg(18:21)),'float');SET_LOCAL_POSITION_SETPOINT{length(SET_LOCAL_POSITION_SETPOINT)}.yaw = typecast(uint8(msg(22:25)),'float');case LOCAL_POSITION_SETPOINT_IDLOCAL_POSITION_SETPOINT{length(LOCAL_POSITION_SETPOINT)+1}.coordinate_frame = typecast(uint8(msg(7:7)),'uint8');LOCAL_POSITION_SETPOINT{length(LOCAL_POSITION_SETPOINT)}.x = typecast(uint8(msg(8:11)),'float');LOCAL_POSITION_SETPOINT{length(LOCAL_POSITION_SETPOINT)}.y = typecast(uint8(msg(12:15)),'float');LOCAL_POSITION_SETPOINT{length(LOCAL_POSITION_SETPOINT)}.z = typecast(uint8(msg(16:19)),'float');LOCAL_POSITION_SETPOINT{length(LOCAL_POSITION_SETPOINT)}.yaw = typecast(uint8(msg(20:23)),'float');case GLOBAL_POSITION_SETPOINT_INT_IDGLOBAL_POSITION_SETPOINT_INT{length(GLOBAL_POSITION_SETPOINT_INT)+1}.coordinate_frame = typecast(uint8(msg(7:7)),'uint8');GLOBAL_POSITION_SETPOINT_INT{length(GLOBAL_POSITION_SETPOINT_INT)}.latitude = typecast(uint8(msg(8:11)),'int32');GLOBAL_POSITION_SETPOINT_INT{length(GLOBAL_POSITION_SETPOINT_INT)}.longitude = typecast(uint8(msg(12:15)),'int32');GLOBAL_POSITION_SETPOINT_INT{length(GLOBAL_POSITION_SETPOINT_INT)}.altitude = typecast(uint8(msg(16:19)),'int32');GLOBAL_POSITION_SETPOINT_INT{length(GLOBAL_POSITION_SETPOINT_INT)}.yaw = typecast(uint8(msg(20:21)),'int16');case SET_GLOBAL_POSITION_SETPOINT_INT_IDSET_GLOBAL_POSITION_SETPOINT_INT{length(SET_GLOBAL_POSITION_SETPOINT_INT)+1}.coordinate_frame = typecast(uint8(msg(7:7)),'uint8');SET_GLOBAL_POSITION_SETPOINT_INT{length(SET_GLOBAL_POSITION_SETPOINT_INT)}.latitude = typecast(uint8(msg(8:11)),'int32');SET_GLOBAL_POSITION_SETPOINT_INT{length(SET_GLOBAL_POSITION_SETPOINT_INT)}.longitude = typecast(uint8(msg(12:15)),'int32');SET_GLOBAL_POSITION_SETPOINT_INT{length(SET_GLOBAL_POSITION_SETPOINT_INT)}.altitude = typecast(uint8(msg(16:19)),'int32');SET_GLOBAL_POSITION_SETPOINT_INT{length(SET_GLOBAL_POSITION_SETPOINT_INT)}.yaw = typecast(uint8(msg(20:21)),'int16');case SAFETY_SET_ALLOWED_AREA_IDSAFETY_SET_ALLOWED_AREA{length(SAFETY_SET_ALLOWED_AREA)+1}.target_system = typecast(uint8(msg(7:7)),'uint8');SAFETY_SET_ALLOWED_AREA{length(SAFETY_SET_ALLOWED_AREA)}.target_component = typecast(uint8(msg(8:8)),'uint8');SAFETY_SET_ALLOWED_AREA{length(SAFETY_SET_ALLOWED_AREA)}.frame = typecast(uint8(msg(9:9)),'uint8');SAFETY_SET_ALLOWED_AREA{length(SAFETY_SET_ALLOWED_AREA)}.p1x = typecast(uint8(msg(10:13)),'float');SAFETY_SET_ALLOWED_AREA{length(SAFETY_SET_ALLOWED_AREA)}.p1y = typecast(uint8(msg(14:17)),'float');SAFETY_SET_ALLOWED_AREA{length(SAFETY_SET_ALLOWED_AREA)}.p1z = typecast(uint8(msg(18:21)),'float');SAFETY_SET_ALLOWED_AREA{length(SAFETY_SET_ALLOWED_AREA)}.p2x = typecast(uint8(msg(22:25)),'float');SAFETY_SET_ALLOWED_AREA{length(SAFETY_SET_ALLOWED_AREA)}.p2y = typecast(uint8(msg(26:29)),'float');SAFETY_SET_ALLOWED_AREA{length(SAFETY_SET_ALLOWED_AREA)}.p2z = typecast(uint8(msg(30:33)),'float');case SAFETY_ALLOWED_AREA_IDSAFETY_ALLOWED_AREA{length(SAFETY_ALLOWED_AREA)+1}.frame = typecast(uint8(msg(7:7)),'uint8');SAFETY_ALLOWED_AREA{length(SAFETY_ALLOWED_AREA)}.p1x = typecast(uint8(msg(8:11)),'float');SAFETY_ALLOWED_AREA{length(SAFETY_ALLOWED_AREA)}.p1y = typecast(uint8(msg(12:15)),'float');SAFETY_ALLOWED_AREA{length(SAFETY_ALLOWED_AREA)}.p1z = typecast(uint8(msg(16:19)),'float');SAFETY_ALLOWED_AREA{length(SAFETY_ALLOWED_AREA)}.p2x = typecast(uint8(msg(20:23)),'float');SAFETY_ALLOWED_AREA{length(SAFETY_ALLOWED_AREA)}.p2y = typecast(uint8(msg(24:27)),'float');SAFETY_ALLOWED_AREA{length(SAFETY_ALLOWED_AREA)}.p2z = typecast(uint8(msg(28:31)),'float');case SET_ROLL_PITCH_YAW_THRUST_IDSET_ROLL_PITCH_YAW_THRUST{length(SET_ROLL_PITCH_YAW_THRUST)+1}.target_system = typecast(uint8(msg(7:7)),'uint8');SET_ROLL_PITCH_YAW_THRUST{length(SET_ROLL_PITCH_YAW_THRUST)}.target_component = typecast(uint8(msg(8:8)),'uint8');SET_ROLL_PITCH_YAW_THRUST{length(SET_ROLL_PITCH_YAW_THRUST)}.roll = typecast(uint8(msg(9:12)),'float');SET_ROLL_PITCH_YAW_THRUST{length(SET_ROLL_PITCH_YAW_THRUST)}.pitch = typecast(uint8(msg(13:16)),'float');SET_ROLL_PITCH_YAW_THRUST{length(SET_ROLL_PITCH_YAW_THRUST)}.yaw = typecast(uint8(msg(17:20)),'float');SET_ROLL_PITCH_YAW_THRUST{length(SET_ROLL_PITCH_YAW_THRUST)}.thrust = typecast(uint8(msg(21:24)),'float');case SET_ROLL_PITCH_YAW_SPEED_THRUST_IDSET_ROLL_PITCH_YAW_SPEED_THRUST{length(SET_ROLL_PITCH_YAW_SPEED_THRUST)+1}.target_system = typecast(uint8(msg(7:7)),'uint8');SET_ROLL_PITCH_YAW_SPEED_THRUST{length(SET_ROLL_PITCH_YAW_SPEED_THRUST)}.target_component = typecast(uint8(msg(8:8)),'uint8');SET_ROLL_PITCH_YAW_SPEED_THRUST{length(SET_ROLL_PITCH_YAW_SPEED_THRUST)}.roll_speed = typecast(uint8(msg(9:12)),'float');SET_ROLL_PITCH_YAW_SPEED_THRUST{length(SET_ROLL_PITCH_YAW_SPEED_THRUST)}.pitch_speed = typecast(uint8(msg(13:16)),'float');SET_ROLL_PITCH_YAW_SPEED_THRUST{length(SET_ROLL_PITCH_YAW_SPEED_THRUST)}.yaw_speed = typecast(uint8(msg(17:20)),'float');SET_ROLL_PITCH_YAW_SPEED_THRUST{length(SET_ROLL_PITCH_YAW_SPEED_THRUST)}.thrust = typecast(uint8(msg(21:24)),'float');case ROLL_PITCH_YAW_THRUST_SETPOINT_IDROLL_PITCH_YAW_THRUST_SETPOINT{length(ROLL_PITCH_YAW_THRUST_SETPOINT)+1}.time_boot_ms = typecast(uint8(msg(7:10)),'uint32');ROLL_PITCH_YAW_THRUST_SETPOINT{length(ROLL_PITCH_YAW_THRUST_SETPOINT)}.roll = typecast(uint8(msg(11:14)),'float');ROLL_PITCH_YAW_THRUST_SETPOINT{length(ROLL_PITCH_YAW_THRUST_SETPOINT)}.pitch = typecast(uint8(msg(15:18)),'float');ROLL_PITCH_YAW_THRUST_SETPOINT{length(ROLL_PITCH_YAW_THRUST_SETPOINT)}.yaw = typecast(uint8(msg(19:22)),'float');ROLL_PITCH_YAW_THRUST_SETPOINT{length(ROLL_PITCH_YAW_THRUST_SETPOINT)}.thrust = typecast(uint8(msg(23:26)),'float');case ROLL_PITCH_YAW_SPEED_THRUST_SETPOINT_IDROLL_PITCH_YAW_SPEED_THRUST_SETPOINT{length(ROLL_PITCH_YAW_SPEED_THRUST_SETPOINT)+1}.time_boot_ms = typecast(uint8(msg(7:10)),'uint32');ROLL_PITCH_YAW_SPEED_THRUST_SETPOINT{length(ROLL_PITCH_YAW_SPEED_THRUST_SETPOINT)}.roll_speed = typecast(uint8(msg(11:14)),'float');ROLL_PITCH_YAW_SPEED_THRUST_SETPOINT{length(ROLL_PITCH_YAW_SPEED_THRUST_SETPOINT)}.pitch_speed = typecast(uint8(msg(15:18)),'float');ROLL_PITCH_YAW_SPEED_THRUST_SETPOINT{length(ROLL_PITCH_YAW_SPEED_THRUST_SETPOINT)}.yaw_speed = typecast(uint8(msg(19:22)),'float');ROLL_PITCH_YAW_SPEED_THRUST_SETPOINT{length(ROLL_PITCH_YAW_SPEED_THRUST_SETPOINT)}.thrust = typecast(uint8(msg(23:26)),'float');case SET_QUAD_MOTORS_SETPOINT_IDSET_QUAD_MOTORS_SETPOINT{length(SET_QUAD_MOTORS_SETPOINT)+1}.target_system = typecast(uint8(msg(7:7)),'uint8');SET_QUAD_MOTORS_SETPOINT{length(SET_QUAD_MOTORS_SETPOINT)}.motor_front_nw = typecast(uint8(msg(8:9)),'uint16');SET_QUAD_MOTORS_SETPOINT{length(SET_QUAD_MOTORS_SETPOINT)}.motor_right_ne = typecast(uint8(msg(10:11)),'uint16');SET_QUAD_MOTORS_SETPOINT{length(SET_QUAD_MOTORS_SETPOINT)}.motor_back_se = typecast(uint8(msg(12:13)),'uint16');SET_QUAD_MOTORS_SETPOINT{length(SET_QUAD_MOTORS_SETPOINT)}.motor_left_sw = typecast(uint8(msg(14:15)),'uint16');case SET_QUAD_SWARM_ROLL_PITCH_YAW_THRUST_IDSET_QUAD_SWARM_ROLL_PITCH_YAW_THRUST{length(SET_QUAD_SWARM_ROLL_PITCH_YAW_THRUST)+1}.group = typecast(uint8(msg(7:7)),'uint8');SET_QUAD_SWARM_ROLL_PITCH_YAW_THRUST{length(SET_QUAD_SWARM_ROLL_PITCH_YAW_THRUST)}.mode = typecast(uint8(msg(8:8)),'uint8');SET_QUAD_SWARM_ROLL_PITCH_YAW_THRUST{length(SET_QUAD_SWARM_ROLL_PITCH_YAW_THRUST)}.roll = typecast(uint8(msg(8:8)),'');SET_QUAD_SWARM_ROLL_PITCH_YAW_THRUST{length(SET_QUAD_SWARM_ROLL_PITCH_YAW_THRUST)}.pitch = typecast(uint8(msg(8:8)),'');SET_QUAD_SWARM_ROLL_PITCH_YAW_THRUST{length(SET_QUAD_SWARM_ROLL_PITCH_YAW_THRUST)}.yaw = typecast(uint8(msg(8:8)),'');SET_QUAD_SWARM_ROLL_PITCH_YAW_THRUST{length(SET_QUAD_SWARM_ROLL_PITCH_YAW_THRUST)}.thrust = typecast(uint8(msg(8:8)),'');case NAV_CONTROLLER_OUTPUT_IDNAV_CONTROLLER_OUTPUT{length(NAV_CONTROLLER_OUTPUT)+1}.nav_roll = typecast(uint8(msg(7:10)),'float');NAV_CONTROLLER_OUTPUT{length(NAV_CONTROLLER_OUTPUT)}.nav_pitch = typecast(uint8(msg(11:14)),'float');NAV_CONTROLLER_OUTPUT{length(NAV_CONTROLLER_OUTPUT)}.nav_bearing = typecast(uint8(msg(15:16)),'int16');NAV_CONTROLLER_OUTPUT{length(NAV_CONTROLLER_OUTPUT)}.target_bearing = typecast(uint8(msg(17:18)),'int16');NAV_CONTROLLER_OUTPUT{length(NAV_CONTROLLER_OUTPUT)}.wp_dist = typecast(uint8(msg(19:20)),'uint16');NAV_CONTROLLER_OUTPUT{length(NAV_CONTROLLER_OUTPUT)}.alt_error = typecast(uint8(msg(21:24)),'float');NAV_CONTROLLER_OUTPUT{length(NAV_CONTROLLER_OUTPUT)}.aspd_error = typecast(uint8(msg(25:28)),'float');NAV_CONTROLLER_OUTPUT{length(NAV_CONTROLLER_OUTPUT)}.xtrack_error = typecast(uint8(msg(29:32)),'float');case SET_QUAD_SWARM_LED_ROLL_PITCH_YAW_THRUST_IDSET_QUAD_SWARM_LED_ROLL_PITCH_YAW_THRUST{length(SET_QUAD_SWARM_LED_ROLL_PITCH_YAW_THRUST)+1}.group = typecast(uint8(msg(7:7)),'uint8');SET_QUAD_SWARM_LED_ROLL_PITCH_YAW_THRUST{length(SET_QUAD_SWARM_LED_ROLL_PITCH_YAW_THRUST)}.mode = typecast(uint8(msg(8:8)),'uint8');SET_QUAD_SWARM_LED_ROLL_PITCH_YAW_THRUST{length(SET_QUAD_SWARM_LED_ROLL_PITCH_YAW_THRUST)}.led_red = typecast(uint8(msg(8:8)),'');SET_QUAD_SWARM_LED_ROLL_PITCH_YAW_THRUST{length(SET_QUAD_SWARM_LED_ROLL_PITCH_YAW_THRUST)}.led_blue = typecast(uint8(msg(8:8)),'');SET_QUAD_SWARM_LED_ROLL_PITCH_YAW_THRUST{length(SET_QUAD_SWARM_LED_ROLL_PITCH_YAW_THRUST)}.led_green = typecast(uint8(msg(8:8)),'');SET_QUAD_SWARM_LED_ROLL_PITCH_YAW_THRUST{length(SET_QUAD_SWARM_LED_ROLL_PITCH_YAW_THRUST)}.roll = typecast(uint8(msg(8:8)),'');SET_QUAD_SWARM_LED_ROLL_PITCH_YAW_THRUST{length(SET_QUAD_SWARM_LED_ROLL_PITCH_YAW_THRUST)}.pitch = typecast(uint8(msg(8:8)),'');SET_QUAD_SWARM_LED_ROLL_PITCH_YAW_THRUST{length(SET_QUAD_SWARM_LED_ROLL_PITCH_YAW_THRUST)}.yaw = typecast(uint8(msg(8:8)),'');SET_QUAD_SWARM_LED_ROLL_PITCH_YAW_THRUST{length(SET_QUAD_SWARM_LED_ROLL_PITCH_YAW_THRUST)}.thrust = typecast(uint8(msg(8:8)),'');case STATE_CORRECTION_IDSTATE_CORRECTION{length(STATE_CORRECTION)+1}.xErr = typecast(uint8(msg(7:10)),'float');STATE_CORRECTION{length(STATE_CORRECTION)}.yErr = typecast(uint8(msg(11:14)),'float');STATE_CORRECTION{length(STATE_CORRECTION)}.zErr = typecast(uint8(msg(15:18)),'float');STATE_CORRECTION{length(STATE_CORRECTION)}.rollErr = typecast(uint8(msg(19:22)),'float');STATE_CORRECTION{length(STATE_CORRECTION)}.pitchErr = typecast(uint8(msg(23:26)),'float');STATE_CORRECTION{length(STATE_CORRECTION)}.yawErr = typecast(uint8(msg(27:30)),'float');STATE_CORRECTION{length(STATE_CORRECTION)}.vxErr = typecast(uint8(msg(31:34)),'float');STATE_CORRECTION{length(STATE_CORRECTION)}.vyErr = typecast(uint8(msg(35:38)),'float');STATE_CORRECTION{length(STATE_CORRECTION)}.vzErr = typecast(uint8(msg(39:42)),'float');case REQUEST_DATA_STREAM_IDREQUEST_DATA_STREAM{length(REQUEST_DATA_STREAM)+1}.target_system = typecast(uint8(msg(7:7)),'uint8');REQUEST_DATA_STREAM{length(REQUEST_DATA_STREAM)}.target_component = typecast(uint8(msg(8:8)),'uint8');REQUEST_DATA_STREAM{length(REQUEST_DATA_STREAM)}.req_stream_id = typecast(uint8(msg(9:9)),'uint8');REQUEST_DATA_STREAM{length(REQUEST_DATA_STREAM)}.req_message_rate = typecast(uint8(msg(10:11)),'uint16');REQUEST_DATA_STREAM{length(REQUEST_DATA_STREAM)}.start_stop = typecast(uint8(msg(12:12)),'uint8');case DATA_STREAM_IDDATA_STREAM{length(DATA_STREAM)+1}.stream_id = typecast(uint8(msg(7:7)),'uint8');DATA_STREAM{length(DATA_STREAM)}.message_rate = typecast(uint8(msg(8:9)),'uint16');DATA_STREAM{length(DATA_STREAM)}.on_off = typecast(uint8(msg(10:10)),'uint8');case MANUAL_CONTROL_IDMANUAL_CONTROL{length(MANUAL_CONTROL)+1}.target = typecast(uint8(msg(7:7)),'uint8');MANUAL_CONTROL{length(MANUAL_CONTROL)}.x = typecast(uint8(msg(8:9)),'int16');MANUAL_CONTROL{length(MANUAL_CONTROL)}.y = typecast(uint8(msg(10:11)),'int16');MANUAL_CONTROL{length(MANUAL_CONTROL)}.z = typecast(uint8(msg(12:13)),'int16');MANUAL_CONTROL{length(MANUAL_CONTROL)}.r = typecast(uint8(msg(14:15)),'int16');MANUAL_CONTROL{length(MANUAL_CONTROL)}.buttons = typecast(uint8(msg(16:17)),'uint16');case RC_CHANNELS_OVERRIDE_IDRC_CHANNELS_OVERRIDE{length(RC_CHANNELS_OVERRIDE)+1}.target_system = typecast(uint8(msg(7:7)),'uint8');RC_CHANNELS_OVERRIDE{length(RC_CHANNELS_OVERRIDE)}.target_component = typecast(uint8(msg(8:8)),'uint8');RC_CHANNELS_OVERRIDE{length(RC_CHANNELS_OVERRIDE)}.chan1_raw = typecast(uint8(msg(9:10)),'uint16');RC_CHANNELS_OVERRIDE{length(RC_CHANNELS_OVERRIDE)}.chan2_raw = typecast(uint8(msg(11:12)),'uint16');RC_CHANNELS_OVERRIDE{length(RC_CHANNELS_OVERRIDE)}.chan3_raw = typecast(uint8(msg(13:14)),'uint16');RC_CHANNELS_OVERRIDE{length(RC_CHANNELS_OVERRIDE)}.chan4_raw = typecast(uint8(msg(15:16)),'uint16');RC_CHANNELS_OVERRIDE{length(RC_CHANNELS_OVERRIDE)}.chan5_raw = typecast(uint8(msg(17:18)),'uint16');RC_CHANNELS_OVERRIDE{length(RC_CHANNELS_OVERRIDE)}.chan6_raw = typecast(uint8(msg(19:20)),'uint16');RC_CHANNELS_OVERRIDE{length(RC_CHANNELS_OVERRIDE)}.chan7_raw = typecast(uint8(msg(21:22)),'uint16');RC_CHANNELS_OVERRIDE{length(RC_CHANNELS_OVERRIDE)}.chan8_raw = typecast(uint8(msg(23:24)),'uint16');case VFR_HUD_IDVFR_HUD{length(VFR_HUD)+1}.airspeed = typecast(uint8(msg(7:10)),'float');VFR_HUD{length(VFR_HUD)}.groundspeed = typecast(uint8(msg(11:14)),'float');VFR_HUD{length(VFR_HUD)}.heading = typecast(uint8(msg(15:16)),'int16');VFR_HUD{length(VFR_HUD)}.throttle = typecast(uint8(msg(17:18)),'uint16');VFR_HUD{length(VFR_HUD)}.alt = typecast(uint8(msg(19:22)),'float');VFR_HUD{length(VFR_HUD)}.climb = typecast(uint8(msg(23:26)),'float');case COMMAND_LONG_IDCOMMAND_LONG{length(COMMAND_LONG)+1}.target_system = typecast(uint8(msg(7:7)),'uint8');COMMAND_LONG{length(COMMAND_LONG)}.target_component = typecast(uint8(msg(8:8)),'uint8');COMMAND_LONG{length(COMMAND_LONG)}.command = typecast(uint8(msg(9:10)),'uint16');COMMAND_LONG{length(COMMAND_LONG)}.confirmation = typecast(uint8(msg(11:11)),'uint8');COMMAND_LONG{length(COMMAND_LONG)}.param1 = typecast(uint8(msg(12:15)),'float');COMMAND_LONG{length(COMMAND_LONG)}.param2 = typecast(uint8(msg(16:19)),'float');COMMAND_LONG{length(COMMAND_LONG)}.param3 = typecast(uint8(msg(20:23)),'float');COMMAND_LONG{length(COMMAND_LONG)}.param4 = typecast(uint8(msg(24:27)),'float');COMMAND_LONG{length(COMMAND_LONG)}.param5 = typecast(uint8(msg(28:31)),'float');COMMAND_LONG{length(COMMAND_LONG)}.param6 = typecast(uint8(msg(32:35)),'float');COMMAND_LONG{length(COMMAND_LONG)}.param7 = typecast(uint8(msg(36:39)),'float');case COMMAND_ACK_IDCOMMAND_ACK{length(COMMAND_ACK)+1}.command = typecast(uint8(msg(7:8)),'uint16');COMMAND_ACK{length(COMMAND_ACK)}.result = typecast(uint8(msg(9:9)),'uint8');case ROLL_PITCH_YAW_RATES_THRUST_SETPOINT_IDROLL_PITCH_YAW_RATES_THRUST_SETPOINT{length(ROLL_PITCH_YAW_RATES_THRUST_SETPOINT)+1}.time_boot_ms = typecast(uint8(msg(7:10)),'uint32');ROLL_PITCH_YAW_RATES_THRUST_SETPOINT{length(ROLL_PITCH_YAW_RATES_THRUST_SETPOINT)}.roll_rate = typecast(uint8(msg(11:14)),'float');ROLL_PITCH_YAW_RATES_THRUST_SETPOINT{length(ROLL_PITCH_YAW_RATES_THRUST_SETPOINT)}.pitch_rate = typecast(uint8(msg(15:18)),'float');ROLL_PITCH_YAW_RATES_THRUST_SETPOINT{length(ROLL_PITCH_YAW_RATES_THRUST_SETPOINT)}.yaw_rate = typecast(uint8(msg(19:22)),'float');ROLL_PITCH_YAW_RATES_THRUST_SETPOINT{length(ROLL_PITCH_YAW_RATES_THRUST_SETPOINT)}.thrust = typecast(uint8(msg(23:26)),'float');case MANUAL_SETPOINT_IDMANUAL_SETPOINT{length(MANUAL_SETPOINT)+1}.time_boot_ms = typecast(uint8(msg(7:10)),'uint32');MANUAL_SETPOINT{length(MANUAL_SETPOINT)}.roll = typecast(uint8(msg(11:14)),'float');MANUAL_SETPOINT{length(MANUAL_SETPOINT)}.pitch = typecast(uint8(msg(15:18)),'float');MANUAL_SETPOINT{length(MANUAL_SETPOINT)}.yaw = typecast(uint8(msg(19:22)),'float');MANUAL_SETPOINT{length(MANUAL_SETPOINT)}.thrust = typecast(uint8(msg(23:26)),'float');MANUAL_SETPOINT{length(MANUAL_SETPOINT)}.mode_switch = typecast(uint8(msg(27:27)),'uint8');MANUAL_SETPOINT{length(MANUAL_SETPOINT)}.manual_override_switch = typecast(uint8(msg(28:28)),'uint8');case LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET_IDLOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET{length(LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET)+1}.time_boot_ms = typecast(uint8(msg(7:10)),'uint32');LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET{length(LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET)}.x = typecast(uint8(msg(11:14)),'float');LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET{length(LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET)}.y = typecast(uint8(msg(15:18)),'float');LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET{length(LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET)}.z = typecast(uint8(msg(19:22)),'float');LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET{length(LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET)}.roll = typecast(uint8(msg(23:26)),'float');LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET{length(LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET)}.pitch = typecast(uint8(msg(27:30)),'float');LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET{length(LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET)}.yaw = typecast(uint8(msg(31:34)),'float');case HIL_STATE_IDHIL_STATE{length(HIL_STATE)+1}.time_usec = typecast(uint8(msg(7:14)),'uint64');HIL_STATE{length(HIL_STATE)}.roll = typecast(uint8(msg(15:18)),'float');HIL_STATE{length(HIL_STATE)}.pitch = typecast(uint8(msg(19:22)),'float');HIL_STATE{length(HIL_STATE)}.yaw = typecast(uint8(msg(23:26)),'float');HIL_STATE{length(HIL_STATE)}.rollspeed = typecast(uint8(msg(27:30)),'float');HIL_STATE{length(HIL_STATE)}.pitchspeed = typecast(uint8(msg(31:34)),'float');HIL_STATE{length(HIL_STATE)}.yawspeed = typecast(uint8(msg(35:38)),'float');HIL_STATE{length(HIL_STATE)}.lat = typecast(uint8(msg(39:42)),'int32');HIL_STATE{length(HIL_STATE)}.lon = typecast(uint8(msg(43:46)),'int32');HIL_STATE{length(HIL_STATE)}.alt = typecast(uint8(msg(47:50)),'int32');HIL_STATE{length(HIL_STATE)}.vx = typecast(uint8(msg(51:52)),'int16');HIL_STATE{length(HIL_STATE)}.vy = typecast(uint8(msg(53:54)),'int16');HIL_STATE{length(HIL_STATE)}.vz = typecast(uint8(msg(55:56)),'int16');HIL_STATE{length(HIL_STATE)}.xacc = typecast(uint8(msg(57:58)),'int16');HIL_STATE{length(HIL_STATE)}.yacc = typecast(uint8(msg(59:60)),'int16');HIL_STATE{length(HIL_STATE)}.zacc = typecast(uint8(msg(61:62)),'int16');case HIL_CONTROLS_IDHIL_CONTROLS{length(HIL_CONTROLS)+1}.time_usec = typecast(uint8(msg(7:14)),'uint64');HIL_CONTROLS{length(HIL_CONTROLS)}.roll_ailerons = typecast(uint8(msg(15:18)),'float');HIL_CONTROLS{length(HIL_CONTROLS)}.pitch_elevator = typecast(uint8(msg(19:22)),'float');HIL_CONTROLS{length(HIL_CONTROLS)}.yaw_rudder = typecast(uint8(msg(23:26)),'float');HIL_CONTROLS{length(HIL_CONTROLS)}.throttle = typecast(uint8(msg(27:30)),'float');HIL_CONTROLS{length(HIL_CONTROLS)}.aux1 = typecast(uint8(msg(31:34)),'float');HIL_CONTROLS{length(HIL_CONTROLS)}.aux2 = typecast(uint8(msg(35:38)),'float');HIL_CONTROLS{length(HIL_CONTROLS)}.aux3 = typecast(uint8(msg(39:42)),'float');HIL_CONTROLS{length(HIL_CONTROLS)}.aux4 = typecast(uint8(msg(43:46)),'float');HIL_CONTROLS{length(HIL_CONTROLS)}.mode = typecast(uint8(msg(47:47)),'uint8');HIL_CONTROLS{length(HIL_CONTROLS)}.nav_mode = typecast(uint8(msg(48:48)),'uint8');case HIL_RC_INPUTS_RAW_IDHIL_RC_INPUTS_RAW{length(HIL_RC_INPUTS_RAW)+1}.time_usec = typecast(uint8(msg(7:14)),'uint64');HIL_RC_INPUTS_RAW{length(HIL_RC_INPUTS_RAW)}.chan1_raw = typecast(uint8(msg(15:16)),'uint16');HIL_RC_INPUTS_RAW{length(HIL_RC_INPUTS_RAW)}.chan2_raw = typecast(uint8(msg(17:18)),'uint16');HIL_RC_INPUTS_RAW{length(HIL_RC_INPUTS_RAW)}.chan3_raw = typecast(uint8(msg(19:20)),'uint16');HIL_RC_INPUTS_RAW{length(HIL_RC_INPUTS_RAW)}.chan4_raw = typecast(uint8(msg(21:22)),'uint16');HIL_RC_INPUTS_RAW{length(HIL_RC_INPUTS_RAW)}.chan5_raw = typecast(uint8(msg(23:24)),'uint16');HIL_RC_INPUTS_RAW{length(HIL_RC_INPUTS_RAW)}.chan6_raw = typecast(uint8(msg(25:26)),'uint16');HIL_RC_INPUTS_RAW{length(HIL_RC_INPUTS_RAW)}.chan7_raw = typecast(uint8(msg(27:28)),'uint16');HIL_RC_INPUTS_RAW{length(HIL_RC_INPUTS_RAW)}.chan8_raw = typecast(uint8(msg(29:30)),'uint16');HIL_RC_INPUTS_RAW{length(HIL_RC_INPUTS_RAW)}.chan9_raw = typecast(uint8(msg(31:32)),'uint16');HIL_RC_INPUTS_RAW{length(HIL_RC_INPUTS_RAW)}.chan10_raw = typecast(uint8(msg(33:34)),'uint16');HIL_RC_INPUTS_RAW{length(HIL_RC_INPUTS_RAW)}.chan11_raw = typecast(uint8(msg(35:36)),'uint16');HIL_RC_INPUTS_RAW{length(HIL_RC_INPUTS_RAW)}.chan12_raw = typecast(uint8(msg(37:38)),'uint16');HIL_RC_INPUTS_RAW{length(HIL_RC_INPUTS_RAW)}.rssi = typecast(uint8(msg(39:39)),'uint8');case OPTICAL_FLOW_IDOPTICAL_FLOW{length(OPTICAL_FLOW)+1}.time_usec = typecast(uint8(msg(7:14)),'uint64');OPTICAL_FLOW{length(OPTICAL_FLOW)}.sensor_id = typecast(uint8(msg(15:15)),'uint8');OPTICAL_FLOW{length(OPTICAL_FLOW)}.flow_x = typecast(uint8(msg(16:17)),'int16');OPTICAL_FLOW{length(OPTICAL_FLOW)}.flow_y = typecast(uint8(msg(18:19)),'int16');OPTICAL_FLOW{length(OPTICAL_FLOW)}.flow_comp_m_x = typecast(uint8(msg(20:23)),'float');OPTICAL_FLOW{length(OPTICAL_FLOW)}.flow_comp_m_y = typecast(uint8(msg(24:27)),'float');OPTICAL_FLOW{length(OPTICAL_FLOW)}.quality = typecast(uint8(msg(28:28)),'uint8');OPTICAL_FLOW{length(OPTICAL_FLOW)}.ground_distance = typecast(uint8(msg(29:32)),'float');case GLOBAL_VISION_POSITION_ESTIMATE_IDGLOBAL_VISION_POSITION_ESTIMATE{length(GLOBAL_VISION_POSITION_ESTIMATE)+1}.usec = typecast(uint8(msg(7:14)),'uint64');GLOBAL_VISION_POSITION_ESTIMATE{length(GLOBAL_VISION_POSITION_ESTIMATE)}.x = typecast(uint8(msg(15:18)),'float');GLOBAL_VISION_POSITION_ESTIMATE{length(GLOBAL_VISION_POSITION_ESTIMATE)}.y = typecast(uint8(msg(19:22)),'float');GLOBAL_VISION_POSITION_ESTIMATE{length(GLOBAL_VISION_POSITION_ESTIMATE)}.z = typecast(uint8(msg(23:26)),'float');GLOBAL_VISION_POSITION_ESTIMATE{length(GLOBAL_VISION_POSITION_ESTIMATE)}.roll = typecast(uint8(msg(27:30)),'float');GLOBAL_VISION_POSITION_ESTIMATE{length(GLOBAL_VISION_POSITION_ESTIMATE)}.pitch = typecast(uint8(msg(31:34)),'float');GLOBAL_VISION_POSITION_ESTIMATE{length(GLOBAL_VISION_POSITION_ESTIMATE)}.yaw = typecast(uint8(msg(35:38)),'float');case VISION_POSITION_ESTIMATE_IDVISION_POSITION_ESTIMATE{length(VISION_POSITION_ESTIMATE)+1}.usec = typecast(uint8(msg(7:14)),'uint64');VISION_POSITION_ESTIMATE{length(VISION_POSITION_ESTIMATE)}.x = typecast(uint8(msg(15:18)),'float');VISION_POSITION_ESTIMATE{length(VISION_POSITION_ESTIMATE)}.y = typecast(uint8(msg(19:22)),'float');VISION_POSITION_ESTIMATE{length(VISION_POSITION_ESTIMATE)}.z = typecast(uint8(msg(23:26)),'float');VISION_POSITION_ESTIMATE{length(VISION_POSITION_ESTIMATE)}.roll = typecast(uint8(msg(27:30)),'float');VISION_POSITION_ESTIMATE{length(VISION_POSITION_ESTIMATE)}.pitch = typecast(uint8(msg(31:34)),'float');VISION_POSITION_ESTIMATE{length(VISION_POSITION_ESTIMATE)}.yaw = typecast(uint8(msg(35:38)),'float');case VISION_SPEED_ESTIMATE_IDVISION_SPEED_ESTIMATE{length(VISION_SPEED_ESTIMATE)+1}.usec = typecast(uint8(msg(7:14)),'uint64');VISION_SPEED_ESTIMATE{length(VISION_SPEED_ESTIMATE)}.x = typecast(uint8(msg(15:18)),'float');VISION_SPEED_ESTIMATE{length(VISION_SPEED_ESTIMATE)}.y = typecast(uint8(msg(19:22)),'float');VISION_SPEED_ESTIMATE{length(VISION_SPEED_ESTIMATE)}.z = typecast(uint8(msg(23:26)),'float');case VICON_POSITION_ESTIMATE_IDVICON_POSITION_ESTIMATE{length(VICON_POSITION_ESTIMATE)+1}.usec = typecast(uint8(msg(7:14)),'uint64');VICON_POSITION_ESTIMATE{length(VICON_POSITION_ESTIMATE)}.x = typecast(uint8(msg(15:18)),'float');VICON_POSITION_ESTIMATE{length(VICON_POSITION_ESTIMATE)}.y = typecast(uint8(msg(19:22)),'float');VICON_POSITION_ESTIMATE{length(VICON_POSITION_ESTIMATE)}.z = typecast(uint8(msg(23:26)),'float');VICON_POSITION_ESTIMATE{length(VICON_POSITION_ESTIMATE)}.roll = typecast(uint8(msg(27:30)),'float');VICON_POSITION_ESTIMATE{length(VICON_POSITION_ESTIMATE)}.pitch = typecast(uint8(msg(31:34)),'float');VICON_POSITION_ESTIMATE{length(VICON_POSITION_ESTIMATE)}.yaw = typecast(uint8(msg(35:38)),'float');case HIGHRES_IMU_IDHIGHRES_IMU{length(HIGHRES_IMU)+1}.time_usec = typecast(uint8(msg(7:14)),'uint64');HIGHRES_IMU{length(HIGHRES_IMU)}.xacc = typecast(uint8(msg(15:18)),'float');HIGHRES_IMU{length(HIGHRES_IMU)}.yacc = typecast(uint8(msg(19:22)),'float');HIGHRES_IMU{length(HIGHRES_IMU)}.zacc = typecast(uint8(msg(23:26)),'float');HIGHRES_IMU{length(HIGHRES_IMU)}.xgyro = typecast(uint8(msg(27:30)),'float');HIGHRES_IMU{length(HIGHRES_IMU)}.ygyro = typecast(uint8(msg(31:34)),'float');HIGHRES_IMU{length(HIGHRES_IMU)}.zgyro = typecast(uint8(msg(35:38)),'float');HIGHRES_IMU{length(HIGHRES_IMU)}.xmag = typecast(uint8(msg(39:42)),'float');HIGHRES_IMU{length(HIGHRES_IMU)}.ymag = typecast(uint8(msg(43:46)),'float');HIGHRES_IMU{length(HIGHRES_IMU)}.zmag = typecast(uint8(msg(47:50)),'float');HIGHRES_IMU{length(HIGHRES_IMU)}.abs_pressure = typecast(uint8(msg(51:54)),'float');HIGHRES_IMU{length(HIGHRES_IMU)}.diff_pressure = typecast(uint8(msg(55:58)),'float');HIGHRES_IMU{length(HIGHRES_IMU)}.pressure_alt = typecast(uint8(msg(59:62)),'float');HIGHRES_IMU{length(HIGHRES_IMU)}.temperature = typecast(uint8(msg(63:66)),'float');HIGHRES_IMU{length(HIGHRES_IMU)}.fields_updated = typecast(uint8(msg(67:68)),'uint16');case OMNIDIRECTIONAL_FLOW_IDOMNIDIRECTIONAL_FLOW{length(OMNIDIRECTIONAL_FLOW)+1}.time_usec = typecast(uint8(msg(7:14)),'uint64');OMNIDIRECTIONAL_FLOW{length(OMNIDIRECTIONAL_FLOW)}.sensor_id = typecast(uint8(msg(15:15)),'uint8');OMNIDIRECTIONAL_FLOW{length(OMNIDIRECTIONAL_FLOW)}.left = typecast(uint8(msg(15:15)),'');OMNIDIRECTIONAL_FLOW{length(OMNIDIRECTIONAL_FLOW)}.right = typecast(uint8(msg(15:15)),'');OMNIDIRECTIONAL_FLOW{length(OMNIDIRECTIONAL_FLOW)}.quality = typecast(uint8(msg(16:16)),'uint8');OMNIDIRECTIONAL_FLOW{length(OMNIDIRECTIONAL_FLOW)}.front_distance_m = typecast(uint8(msg(17:20)),'float');case HIL_SENSOR_IDHIL_SENSOR{length(HIL_SENSOR)+1}.time_usec = typecast(uint8(msg(7:14)),'uint64');HIL_SENSOR{length(HIL_SENSOR)}.xacc = typecast(uint8(msg(15:18)),'float');HIL_SENSOR{length(HIL_SENSOR)}.yacc = typecast(uint8(msg(19:22)),'float');HIL_SENSOR{length(HIL_SENSOR)}.zacc = typecast(uint8(msg(23:26)),'float');HIL_SENSOR{length(HIL_SENSOR)}.xgyro = typecast(uint8(msg(27:30)),'float');HIL_SENSOR{length(HIL_SENSOR)}.ygyro = typecast(uint8(msg(31:34)),'float');HIL_SENSOR{length(HIL_SENSOR)}.zgyro = typecast(uint8(msg(35:38)),'float');HIL_SENSOR{length(HIL_SENSOR)}.xmag = typecast(uint8(msg(39:42)),'float');HIL_SENSOR{length(HIL_SENSOR)}.ymag = typecast(uint8(msg(43:46)),'float');HIL_SENSOR{length(HIL_SENSOR)}.zmag = typecast(uint8(msg(47:50)),'float');HIL_SENSOR{length(HIL_SENSOR)}.abs_pressure = typecast(uint8(msg(51:54)),'float');HIL_SENSOR{length(HIL_SENSOR)}.diff_pressure = typecast(uint8(msg(55:58)),'float');HIL_SENSOR{length(HIL_SENSOR)}.pressure_alt = typecast(uint8(msg(59:62)),'float');HIL_SENSOR{length(HIL_SENSOR)}.temperature = typecast(uint8(msg(63:66)),'float');HIL_SENSOR{length(HIL_SENSOR)}.fields_updated = typecast(uint8(msg(67:70)),'uint32');case SIM_STATE_IDSIM_STATE{length(SIM_STATE)+1}.q1 = typecast(uint8(msg(7:10)),'float');SIM_STATE{length(SIM_STATE)}.q2 = typecast(uint8(msg(11:14)),'float');SIM_STATE{length(SIM_STATE)}.q3 = typecast(uint8(msg(15:18)),'float');SIM_STATE{length(SIM_STATE)}.q4 = typecast(uint8(msg(19:22)),'float');SIM_STATE{length(SIM_STATE)}.roll = typecast(uint8(msg(23:26)),'float');SIM_STATE{length(SIM_STATE)}.pitch = typecast(uint8(msg(27:30)),'float');SIM_STATE{length(SIM_STATE)}.yaw = typecast(uint8(msg(31:34)),'float');SIM_STATE{length(SIM_STATE)}.xacc = typecast(uint8(msg(35:38)),'float');SIM_STATE{length(SIM_STATE)}.yacc = typecast(uint8(msg(39:42)),'float');SIM_STATE{length(SIM_STATE)}.zacc = typecast(uint8(msg(43:46)),'float');SIM_STATE{length(SIM_STATE)}.xgyro = typecast(uint8(msg(47:50)),'float');SIM_STATE{length(SIM_STATE)}.ygyro = typecast(uint8(msg(51:54)),'float');SIM_STATE{length(SIM_STATE)}.zgyro = typecast(uint8(msg(55:58)),'float');SIM_STATE{length(SIM_STATE)}.lat = typecast(uint8(msg(59:62)),'float');SIM_STATE{length(SIM_STATE)}.lon = typecast(uint8(msg(63:66)),'float');SIM_STATE{length(SIM_STATE)}.alt = typecast(uint8(msg(67:70)),'float');SIM_STATE{length(SIM_STATE)}.std_dev_horz = typecast(uint8(msg(71:74)),'float');SIM_STATE{length(SIM_STATE)}.std_dev_vert = typecast(uint8(msg(75:78)),'float');SIM_STATE{length(SIM_STATE)}.vn = typecast(uint8(msg(79:82)),'float');SIM_STATE{length(SIM_STATE)}.ve = typecast(uint8(msg(83:86)),'float');SIM_STATE{length(SIM_STATE)}.vd = typecast(uint8(msg(87:90)),'float');case RADIO_STATUS_IDRADIO_STATUS{length(RADIO_STATUS)+1}.rssi = typecast(uint8(msg(7:7)),'uint8');RADIO_STATUS{length(RADIO_STATUS)}.remrssi = typecast(uint8(msg(8:8)),'uint8');RADIO_STATUS{length(RADIO_STATUS)}.txbuf = typecast(uint8(msg(9:9)),'uint8');RADIO_STATUS{length(RADIO_STATUS)}.noise = typecast(uint8(msg(10:10)),'uint8');RADIO_STATUS{length(RADIO_STATUS)}.remnoise = typecast(uint8(msg(11:11)),'uint8');RADIO_STATUS{length(RADIO_STATUS)}.rxerrors = typecast(uint8(msg(12:13)),'uint16');RADIO_STATUS{length(RADIO_STATUS)}.fixed = typecast(uint8(msg(14:15)),'uint16');case FILE_TRANSFER_START_IDFILE_TRANSFER_START{length(FILE_TRANSFER_START)+1}.transfer_uid = typecast(uint8(msg(7:14)),'uint64');FILE_TRANSFER_START{length(FILE_TRANSFER_START)}.dest_path = typecast(uint8(msg(7:14)),'');FILE_TRANSFER_START{length(FILE_TRANSFER_START)}.direction = typecast(uint8(msg(15:15)),'uint8');FILE_TRANSFER_START{length(FILE_TRANSFER_START)}.file_size = typecast(uint8(msg(16:19)),'uint32');FILE_TRANSFER_START{length(FILE_TRANSFER_START)}.flags = typecast(uint8(msg(20:20)),'uint8');case FILE_TRANSFER_DIR_LIST_IDFILE_TRANSFER_DIR_LIST{length(FILE_TRANSFER_DIR_LIST)+1}.transfer_uid = typecast(uint8(msg(7:14)),'uint64');FILE_TRANSFER_DIR_LIST{length(FILE_TRANSFER_DIR_LIST)}.dir_path = typecast(uint8(msg(7:14)),'');FILE_TRANSFER_DIR_LIST{length(FILE_TRANSFER_DIR_LIST)}.flags = typecast(uint8(msg(15:15)),'uint8');case FILE_TRANSFER_RES_IDFILE_TRANSFER_RES{length(FILE_TRANSFER_RES)+1}.transfer_uid = typecast(uint8(msg(7:14)),'uint64');FILE_TRANSFER_RES{length(FILE_TRANSFER_RES)}.result = typecast(uint8(msg(15:15)),'uint8');case HIL_GPS_IDHIL_GPS{length(HIL_GPS)+1}.time_usec = typecast(uint8(msg(7:14)),'uint64');HIL_GPS{length(HIL_GPS)}.fix_type = typecast(uint8(msg(15:15)),'uint8');HIL_GPS{length(HIL_GPS)}.lat = typecast(uint8(msg(16:19)),'int32');HIL_GPS{length(HIL_GPS)}.lon = typecast(uint8(msg(20:23)),'int32');HIL_GPS{length(HIL_GPS)}.alt = typecast(uint8(msg(24:27)),'int32');HIL_GPS{length(HIL_GPS)}.eph = typecast(uint8(msg(28:29)),'uint16');HIL_GPS{length(HIL_GPS)}.epv = typecast(uint8(msg(30:31)),'uint16');HIL_GPS{length(HIL_GPS)}.vel = typecast(uint8(msg(32:33)),'uint16');HIL_GPS{length(HIL_GPS)}.vn = typecast(uint8(msg(34:35)),'int16');HIL_GPS{length(HIL_GPS)}.ve = typecast(uint8(msg(36:37)),'int16');HIL_GPS{length(HIL_GPS)}.vd = typecast(uint8(msg(38:39)),'int16');HIL_GPS{length(HIL_GPS)}.cog = typecast(uint8(msg(40:41)),'uint16');HIL_GPS{length(HIL_GPS)}.satellites_visible = typecast(uint8(msg(42:42)),'uint8');case HIL_OPTICAL_FLOW_IDHIL_OPTICAL_FLOW{length(HIL_OPTICAL_FLOW)+1}.time_usec = typecast(uint8(msg(7:14)),'uint64');HIL_OPTICAL_FLOW{length(HIL_OPTICAL_FLOW)}.sensor_id = typecast(uint8(msg(15:15)),'uint8');HIL_OPTICAL_FLOW{length(HIL_OPTICAL_FLOW)}.flow_x = typecast(uint8(msg(16:17)),'int16');HIL_OPTICAL_FLOW{length(HIL_OPTICAL_FLOW)}.flow_y = typecast(uint8(msg(18:19)),'int16');HIL_OPTICAL_FLOW{length(HIL_OPTICAL_FLOW)}.flow_comp_m_x = typecast(uint8(msg(20:23)),'float');HIL_OPTICAL_FLOW{length(HIL_OPTICAL_FLOW)}.flow_comp_m_y = typecast(uint8(msg(24:27)),'float');HIL_OPTICAL_FLOW{length(HIL_OPTICAL_FLOW)}.quality = typecast(uint8(msg(28:28)),'uint8');HIL_OPTICAL_FLOW{length(HIL_OPTICAL_FLOW)}.ground_distance = typecast(uint8(msg(29:32)),'float');case HIL_STATE_QUATERNION_IDHIL_STATE_QUATERNION{length(HIL_STATE_QUATERNION)+1}.time_usec = typecast(uint8(msg(7:14)),'uint64');HIL_STATE_QUATERNION{length(HIL_STATE_QUATERNION)}.attitude_quaternion = typecast(uint8(msg(7:14)),'');HIL_STATE_QUATERNION{length(HIL_STATE_QUATERNION)}.rollspeed = typecast(uint8(msg(15:18)),'float');HIL_STATE_QUATERNION{length(HIL_STATE_QUATERNION)}.pitchspeed = typecast(uint8(msg(19:22)),'float');HIL_STATE_QUATERNION{length(HIL_STATE_QUATERNION)}.yawspeed = typecast(uint8(msg(23:26)),'float');HIL_STATE_QUATERNION{length(HIL_STATE_QUATERNION)}.lat = typecast(uint8(msg(27:30)),'int32');HIL_STATE_QUATERNION{length(HIL_STATE_QUATERNION)}.lon = typecast(uint8(msg(31:34)),'int32');HIL_STATE_QUATERNION{length(HIL_STATE_QUATERNION)}.alt = typecast(uint8(msg(35:38)),'int32');HIL_STATE_QUATERNION{length(HIL_STATE_QUATERNION)}.vx = typecast(uint8(msg(39:40)),'int16');HIL_STATE_QUATERNION{length(HIL_STATE_QUATERNION)}.vy = typecast(uint8(msg(41:42)),'int16');HIL_STATE_QUATERNION{length(HIL_STATE_QUATERNION)}.vz = typecast(uint8(msg(43:44)),'int16');HIL_STATE_QUATERNION{length(HIL_STATE_QUATERNION)}.ind_airspeed = typecast(uint8(msg(45:46)),'uint16');HIL_STATE_QUATERNION{length(HIL_STATE_QUATERNION)}.true_airspeed = typecast(uint8(msg(47:48)),'uint16');HIL_STATE_QUATERNION{length(HIL_STATE_QUATERNION)}.xacc = typecast(uint8(msg(49:50)),'int16');HIL_STATE_QUATERNION{length(HIL_STATE_QUATERNION)}.yacc = typecast(uint8(msg(51:52)),'int16');HIL_STATE_QUATERNION{length(HIL_STATE_QUATERNION)}.zacc = typecast(uint8(msg(53:54)),'int16');case BATTERY_STATUS_IDBATTERY_STATUS{length(BATTERY_STATUS)+1}.accu_id = typecast(uint8(msg(7:7)),'uint8');BATTERY_STATUS{length(BATTERY_STATUS)}.voltage_cell_1 = typecast(uint8(msg(8:9)),'uint16');BATTERY_STATUS{length(BATTERY_STATUS)}.voltage_cell_2 = typecast(uint8(msg(10:11)),'uint16');BATTERY_STATUS{length(BATTERY_STATUS)}.voltage_cell_3 = typecast(uint8(msg(12:13)),'uint16');BATTERY_STATUS{length(BATTERY_STATUS)}.voltage_cell_4 = typecast(uint8(msg(14:15)),'uint16');BATTERY_STATUS{length(BATTERY_STATUS)}.voltage_cell_5 = typecast(uint8(msg(16:17)),'uint16');BATTERY_STATUS{length(BATTERY_STATUS)}.voltage_cell_6 = typecast(uint8(msg(18:19)),'uint16');BATTERY_STATUS{length(BATTERY_STATUS)}.current_battery = typecast(uint8(msg(20:21)),'int16');BATTERY_STATUS{length(BATTERY_STATUS)}.current_consumed = typecast(uint8(msg(22:25)),'int32');BATTERY_STATUS{length(BATTERY_STATUS)}.energy_consumed = typecast(uint8(msg(26:29)),'int32');BATTERY_STATUS{length(BATTERY_STATUS)}.battery_remaining = typecast(uint8(msg(30:30)),'int8');case SETPOINT_8DOF_IDSETPOINT_8DOF{length(SETPOINT_8DOF)+1}.target_system = typecast(uint8(msg(7:7)),'uint8');SETPOINT_8DOF{length(SETPOINT_8DOF)}.val1 = typecast(uint8(msg(8:11)),'float');SETPOINT_8DOF{length(SETPOINT_8DOF)}.val2 = typecast(uint8(msg(12:15)),'float');SETPOINT_8DOF{length(SETPOINT_8DOF)}.val3 = typecast(uint8(msg(16:19)),'float');SETPOINT_8DOF{length(SETPOINT_8DOF)}.val4 = typecast(uint8(msg(20:23)),'float');SETPOINT_8DOF{length(SETPOINT_8DOF)}.val5 = typecast(uint8(msg(24:27)),'float');SETPOINT_8DOF{length(SETPOINT_8DOF)}.val6 = typecast(uint8(msg(28:31)),'float');SETPOINT_8DOF{length(SETPOINT_8DOF)}.val7 = typecast(uint8(msg(32:35)),'float');SETPOINT_8DOF{length(SETPOINT_8DOF)}.val8 = typecast(uint8(msg(36:39)),'float');case SETPOINT_6DOF_IDSETPOINT_6DOF{length(SETPOINT_6DOF)+1}.target_system = typecast(uint8(msg(7:7)),'uint8');SETPOINT_6DOF{length(SETPOINT_6DOF)}.trans_x = typecast(uint8(msg(8:11)),'float');SETPOINT_6DOF{length(SETPOINT_6DOF)}.trans_y = typecast(uint8(msg(12:15)),'float');SETPOINT_6DOF{length(SETPOINT_6DOF)}.trans_z = typecast(uint8(msg(16:19)),'float');SETPOINT_6DOF{length(SETPOINT_6DOF)}.rot_x = typecast(uint8(msg(20:23)),'float');SETPOINT_6DOF{length(SETPOINT_6DOF)}.rot_y = typecast(uint8(msg(24:27)),'float');SETPOINT_6DOF{length(SETPOINT_6DOF)}.rot_z = typecast(uint8(msg(28:31)),'float');case MEMORY_VECT_IDMEMORY_VECT{length(MEMORY_VECT)+1}.address = typecast(uint8(msg(7:8)),'uint16');MEMORY_VECT{length(MEMORY_VECT)}.ver = typecast(uint8(msg(9:9)),'uint8');MEMORY_VECT{length(MEMORY_VECT)}.type = typecast(uint8(msg(10:10)),'uint8');MEMORY_VECT{length(MEMORY_VECT)}.value = typecast(uint8(msg(10:10)),'');case DEBUG_VECT_IDDEBUG_VECT{length(DEBUG_VECT)+1}.name = typecast(uint8(msg(0:0)),'');DEBUG_VECT{length(DEBUG_VECT)}.time_usec = typecast(uint8(msg(1:8)),'uint64');DEBUG_VECT{length(DEBUG_VECT)}.x = typecast(uint8(msg(9:12)),'float');DEBUG_VECT{length(DEBUG_VECT)}.y = typecast(uint8(msg(13:16)),'float');DEBUG_VECT{length(DEBUG_VECT)}.z = typecast(uint8(msg(17:20)),'float');case NAMED_VALUE_FLOAT_IDNAMED_VALUE_FLOAT{length(NAMED_VALUE_FLOAT)+1}.time_boot_ms = typecast(uint8(msg(7:10)),'uint32');NAMED_VALUE_FLOAT{length(NAMED_VALUE_FLOAT)}.name = typecast(uint8(msg(7:10)),'');NAMED_VALUE_FLOAT{length(NAMED_VALUE_FLOAT)}.value = typecast(uint8(msg(11:14)),'float');case NAMED_VALUE_INT_IDNAMED_VALUE_INT{length(NAMED_VALUE_INT)+1}.time_boot_ms = typecast(uint8(msg(7:10)),'uint32');NAMED_VALUE_INT{length(NAMED_VALUE_INT)}.name = typecast(uint8(msg(7:10)),'');NAMED_VALUE_INT{length(NAMED_VALUE_INT)}.value = typecast(uint8(msg(11:14)),'int32');case STATUSTEXT_IDSTATUSTEXT{length(STATUSTEXT)+1}.severity = typecast(uint8(msg(7:7)),'uint8');STATUSTEXT{length(STATUSTEXT)}.text = typecast(uint8(msg(7:7)),'');case DEBUG_IDDEBUG{length(DEBUG)+1}.time_boot_ms = typecast(uint8(msg(7:10)),'uint32');DEBUG{length(DEBUG)}.ind = typecast(uint8(msg(11:11)),'uint8');DEBUG{length(DEBUG)}.value = typecast(uint8(msg(12:15)),'float');otherwiseError = false;endend